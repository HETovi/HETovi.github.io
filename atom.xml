<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tovi的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-31T07:32:32.255Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tovi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Makefile学习</title>
    <link href="http://yoursite.com/2018/07/31/Makefile%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/31/Makefile学习/</id>
    <published>2018-07-31T06:29:00.000Z</published>
    <updated>2018-07-31T07:32:32.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><p>在Makefile中的命令，必须以[tab]键开始</p><p>Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。<br>Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。</p><p>本博客中默认的编译器是Unix下的GCC和CC<br><a id="more"></a></p><h2 id="关于程序的链接和编译"><a href="#关于程序的链接和编译" class="headerlink" title="关于程序的链接和编译"></a>关于程序的链接和编译</h2><p>一般来说，无论是C还是C++，首先要把源文件编译成中间代码文件，在windows下是.obj文件，Unix下是.o文件，即Object File，这个动作叫做编译。然后再把大量的Object File合成执行文件，这个动作叫做链接（Link）。<br>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。<br>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（LibraryFile)，也就是 .lib文件，在UNIX下，是Archive File，也就是 .a文件。<br>也就是说，源代码首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p><h2 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h2><p>make命令执行时，需要一个 Makefile文件，以告诉make命令需要怎么样的去编译和链接程序。make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重新编译，从而自己编译所需要的文件和连接目标程序</p><h3 id="makefile的规则"><a href="#makefile的规则" class="headerlink" title="makefile的规则"></a>makefile的规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target...:prerequisites...(预备知识，先决条件)</span><br><span class="line">command(指令)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label）。<br>prerequisites就是，要生成那个target所需要的文件或是目标<br>command就是make需要执行的命令。（任意的shell命令）<br>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如果一个工程有3个头文件，和8个C文件，为了完成规则：<br>1.如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。<br>2.如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。<br>3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序<br>我们的Makefile文件应该是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">edit</span> : <span class="selector-tag">main</span><span class="selector-class">.o</span> <span class="selector-tag">kbd</span><span class="selector-class">.o</span> <span class="selector-tag">command</span><span class="selector-class">.o</span> <span class="selector-tag">display</span><span class="selector-class">.o</span>  <span class="selector-tag">insert</span><span class="selector-class">.osearch</span><span class="selector-class">.o</span> <span class="selector-tag">files</span><span class="selector-class">.o</span> <span class="selector-tag">utils</span><span class="selector-class">.o</span></span><br><span class="line">       <span class="selector-tag">cc-o</span> <span class="selector-tag">edit</span> <span class="selector-tag">main</span><span class="selector-class">.o</span> <span class="selector-tag">kbd</span><span class="selector-class">.o</span> <span class="selector-tag">command</span><span class="selector-class">.o</span> <span class="selector-tag">display</span><span class="selector-class">.o</span>  <span class="selector-tag">insert</span><span class="selector-class">.o</span> <span class="selector-tag">search</span><span class="selector-class">.o</span> <span class="selector-tag">files</span><span class="selector-class">.outils</span><span class="selector-class">.o</span></span><br><span class="line"><span class="selector-tag">main</span><span class="selector-class">.o</span> : <span class="selector-tag">main</span><span class="selector-class">.c</span> <span class="selector-tag">defs</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">main</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">kbd</span><span class="selector-class">.o</span> : <span class="selector-tag">kbd</span><span class="selector-class">.c</span> <span class="selector-tag">defs</span><span class="selector-class">.hcommand</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">kbd</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">command</span><span class="selector-class">.o</span> : <span class="selector-tag">command</span><span class="selector-class">.cdefs</span><span class="selector-class">.h</span> <span class="selector-tag">command</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">command</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-class">.o</span> : <span class="selector-tag">display</span><span class="selector-class">.cdefs</span><span class="selector-class">.h</span> <span class="selector-tag">buffer</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">display</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">insert</span><span class="selector-class">.o</span> : <span class="selector-tag">insert</span><span class="selector-class">.cdefs</span><span class="selector-class">.h</span> <span class="selector-tag">buffer</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">insert</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">search</span><span class="selector-class">.o</span> : <span class="selector-tag">search</span><span class="selector-class">.cdefs</span><span class="selector-class">.h</span> <span class="selector-tag">buffer</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">search</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">files</span><span class="selector-class">.o</span> : <span class="selector-tag">files</span><span class="selector-class">.c</span> <span class="selector-tag">defs</span><span class="selector-class">.hbuffer</span><span class="selector-class">.h</span> <span class="selector-tag">command</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">files</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">utils</span><span class="selector-class">.o</span> : <span class="selector-tag">utils</span><span class="selector-class">.c</span> <span class="selector-tag">defs</span><span class="selector-class">.h</span></span><br><span class="line">       <span class="selector-tag">cc-c</span> <span class="selector-tag">utils</span><span class="selector-class">.c</span></span><br><span class="line"><span class="selector-tag">clean</span> :</span><br><span class="line">       <span class="selector-tag">rmedit</span> <span class="selector-tag">main</span><span class="selector-class">.o</span> <span class="selector-tag">kbd</span><span class="selector-class">.o</span> <span class="selector-tag">command</span><span class="selector-class">.o</span> <span class="selector-tag">display</span><span class="selector-class">.o</span> <span class="selector-tag">insert</span><span class="selector-class">.o</span> <span class="selector-tag">search</span><span class="selector-class">.o</span> <span class="selector-tag">files</span><span class="selector-class">.o</span> <span class="selector-tag">utils</span><span class="selector-class">.o</span></span><br></pre></td></tr></table></figure><p>我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。<br>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个Tab键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。<br>clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;makefile&quot;&gt;&lt;a href=&quot;#makefile&quot; class=&quot;headerlink&quot; title=&quot;makefile&quot;&gt;&lt;/a&gt;makefile&lt;/h1&gt;&lt;p&gt;在Makefile中的命令，必须以[tab]键开始&lt;/p&gt;
&lt;p&gt;Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。&lt;br&gt;Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。&lt;/p&gt;
&lt;p&gt;本博客中默认的编译器是Unix下的GCC和CC&lt;br&gt;
    
    </summary>
    
    
      <category term="Makefile，Unix" scheme="http://yoursite.com/tags/Makefile%EF%BC%8CUnix/"/>
    
  </entry>
  
  <entry>
    <title>C语言数组和指针</title>
    <link href="http://yoursite.com/2018/07/31/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2018/07/31/C语言数组和指针/</id>
    <published>2018-07-31T00:54:25.000Z</published>
    <updated>2018-07-31T03:56:05.296Z</updated>
    
    <content type="html"><![CDATA[<p>1.const 关键字声明后数据不能修改<br>2.sizeof 数组名指的是整个数组的大小（以字节为单位）<br>  sizeof 数组名[0]指的是数组中一个元素的大小<br>  整个数组的大小除以单个元素的大小就是数组元素的个数<br>3.初始化器的重要性<br>  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素<br>  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化<br>4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值<br>  <a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> oxen[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">/*初始化没问题,不足的参数设置为0*/</span></span><br><span class="line">  <span class="keyword">int</span> yaks[SIZE];</span><br><span class="line">  yaks = oxen; <span class="comment">/*不允许*/</span></span><br><span class="line">  yaks[SIZE] = oxen[SIZE];<span class="comment">/*数组下标越界*/</span></span><br><span class="line">  yaks[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">/*不起作用*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.数组边界<br>  在C标准中，使用越界下标的结果是未定义的<br>  使用越界的数组下标可能会导致程序改变其他变量的值。不同的编译器运行同一个程序的结果可能不同，有些会导致程序异常中止。<br>  要注意数组的边界</p><p>6.指针和数组<br>  short类型占两个字节、double类型占八个字节<br>  在C中，指针加一指的是增加一个存储单元，对数组而言，这意味着加一后得到地址是下一个元素的地址，而不是下一个字节的地址，所以必须声明指针所指向对象的类型<br>  系统中地址是按字节编码的<br>7.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;<span class="comment">//一元运算符*和++的优先级相同,但结合律是从右往左</span></span><br></pre></td></tr></table></figure></p><p>  即表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)*start++=*(start++) =&gt;m=start;*m;start++(先把指针指向位置上值取出，然后再递增指针)</span><br><span class="line"><span class="number">2</span>)total = total+*m;</span><br></pre></td></tr></table></figure><p>8.<code>int * p = &amp; a;</code><br>  p是指向a的指针，p中存的是a的地址<br>  &amp;p是指向指针p的指针，&amp;p中存的是指针p的地址<br>9.创建一个指针时，系统只分配了储存指针本身的内存，并未分配存储数据的内存，因此，在使用指针之前，必须先用已分配的地址初始化它。<br>10.const 指针是指不能用指针来改变它所指向的值，但是可以让指针指向别处<br>11.<br>1）把const数据或非const数据的地址初始化为指向const的指针或为其赋值是合法的</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">const double *pc = rate; <span class="comment">//有效</span></span><br><span class="line">pc = locked;<span class="comment">//有效</span></span><br><span class="line">pc = &amp;locked[<span class="number">3</span>] ;<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>2）只能把非const数据的地址赋给普通指针</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">double *pp = rate;<span class="comment">//有效</span></span><br><span class="line">pp = locked;<span class="comment">//无效&lt;因为如果成立的话就可以用指针改变locked的值了&gt;</span></span><br><span class="line">pp = &amp;rate[<span class="number">3</span>];<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>12.<code>double * const pc = &amp;rate;//可以初始化一个不能指向别处的指针</code><br>13.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">int</span> (* p)<span class="selector-attr">[2]</span>;<span class="comment">//p指向一个内含两个int类型值的数组</span></span><br><span class="line"><span class="selector-tag">int</span> * <span class="selector-tag">p</span><span class="selector-attr">[2]</span>;<span class="comment">//p是一个内含两个指针元素的数组，每个元素都指向int 的指针</span></span><br></pre></td></tr></table></figure><p>14.指针的兼容性<br>   指针之间的赋值比数值类型之间的赋值要严格<br>   假如有如下声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br><span class="line"><span class="keyword">int</span> (*pa)[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ar1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> **p2;<span class="comment">//一个指向指针的指针</span></span><br></pre></td></tr></table></figure><p>   有如下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt = &amp;ar1[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1;<span class="comment">//无效</span></span><br><span class="line">pa = ar1;<span class="comment">//都是指向内含3个int类型元素的数组的指针</span></span><br><span class="line">pa = ar2;<span class="comment">//无效</span></span><br><span class="line">p2 = &amp;pt;<span class="comment">//both point-to-int *</span></span><br><span class="line">*p2 = ar2[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">p2 = ar2;<span class="comment">//无效</span></span><br></pre></td></tr></table></figure><p>15.把const指针赋给非const指针不安全，因为这样可以使用新的指针改变const指针指向的数据<br>   但是把非const指针赋给const指针没问题，前提是只进行一级解引用<br>16.编译器会把数组表示法转换成指针表示法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar[<span class="number">1</span>] -&gt; ar+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ar[][length] -&gt;表示ar指向一个内含length个<span class="keyword">int</span>类型值的数组</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> ar[<span class="number">3</span>][<span class="number">4</span>],<span class="keyword">int</span> rows)</span></span>;<span class="comment">//有效声明，但是3会被忽略</span></span><br></pre></td></tr></table></figure><ol start="17"><li>在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.const 关键字声明后数据不能修改&lt;br&gt;2.sizeof 数组名指的是整个数组的大小（以字节为单位）&lt;br&gt;  sizeof 数组名[0]指的是数组中一个元素的大小&lt;br&gt;  整个数组的大小除以单个元素的大小就是数组元素的个数&lt;br&gt;3.初始化器的重要性&lt;br&gt;  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素&lt;br&gt;  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化&lt;br&gt;4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值&lt;br&gt;
    
    </summary>
    
    
      <category term="C语言学习" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/30/hello-world/"/>
    <id>http://yoursite.com/2018/07/30/hello-world/</id>
    <published>2018-07-30T09:28:02.453Z</published>
    <updated>2018-07-31T02:17:30.989Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
