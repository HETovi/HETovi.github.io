<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tovi的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-08T09:43:51.627Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tovi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2018/08/06/Linux/"/>
    <id>http://yoursite.com/2018/08/06/Linux/</id>
    <published>2018-08-06T02:00:00.000Z</published>
    <updated>2018-08-08T09:43:51.627Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的特点<br>1.免费开源<br>2.模块化程度高<br>3.广泛的硬件支持<br>4.安全稳定<br>5.多用户、多任务<br>点击下方阅读，进入Linux的世界</p><a id="more"></a><h1 id="系统启动流程"><a href="#系统启动流程" class="headerlink" title="系统启动流程"></a>系统启动流程</h1><h2 id="系统引导概述"><a href="#系统引导概述" class="headerlink" title="系统引导概述"></a>系统引导概述</h2><h3 id="第一步、加载BIOS"><a href="#第一步、加载BIOS" class="headerlink" title="第一步、加载BIOS"></a>第一步、加载BIOS</h3><p>首先，计算机会加载BIOS，这是计算机上最接近硬件的软件，各家主办制造商都会开发适合自己主板的BIOS。<br>而BIOS中一项很重要的功能就是对自身的硬件做一次健康检查，只有硬件没有问题，才能运行软件，操作系统也是一种软件。<br>这种通电开始的自检过程称为“加电自检”（power on self test）。</p><h3 id="第二步、引导系统"><a href="#第二步、引导系统" class="headerlink" title="第二步、引导系统"></a>第二步、引导系统</h3><p>这个动作是BIOS设定的，BIOS默认会从硬盘上的第0柱面、第0磁道，第一个扇区中读取被称为MBR的东西，即主引导记录。<br>一个扇区的大小是512字节，存放的内容是一段引导程序和分区信息，其中引导程序部分占用446字节，另外64字节是磁盘分区表DPT，最后两字节是MBR的结束位。<br>这512字节的空间是由专门的分区程序产生的，例如，Linux下的fdisk命令，所以它不依赖于任何操作系统。而MBR中的引导程序也是可以修改的，所以可以利用这个特性实现多操作系统共存。<br>由于Redhat和centos默认使用grub作为其引导操作系统的程序，而grub本身比较大，所以常见的方式是在MBR中写入grub的地址，这样系统实际会载入grub作为操作系统的引导程序。</p><h3 id="第三步、运行grub。"><a href="#第三步、运行grub。" class="headerlink" title="第三步、运行grub。"></a>第三步、运行grub。</h3><p>grub最重要的功能就是根据其配置文件加载kernel镜像，并运行内核加载后的第一个程序 /sbin/init，这个程序会根据/etc/inittab来进行初始化的工作。<br>其中这里最重要的就是根据文件中设定的值来确定系统将会运行的runlevel，默认的runlevel定义在“id:3:initdefault:”中，其中的数字3说明目前的运行级别定义为3</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>Linux根据/etc/inittab中定义的系统初始化配置si::sysinit:/etc/rc.d/rc.sysinit执行/etc/rc.sysinit脚本，该脚本会设置系统变量、网络配置，并启动swap、设定/proc、加载用户自定义模块、加载内核设置等。</p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>根据第三步读到的runlevel值来启动对应的服务，如果值为3，就会运行/etc/rc3.d/下的所有脚本。</p><h3 id="第六步、运行-etc-rc-local"><a href="#第六步、运行-etc-rc-local" class="headerlink" title="第六步、运行/etc/rc.local"></a>第六步、运行/etc/rc.local</h3><h3 id="第七步、生成终端或X-Window-来等待用户登录"><a href="#第七步、生成终端或X-Window-来等待用户登录" class="headerlink" title="第七步、生成终端或X Window 来等待用户登录"></a>第七步、生成终端或X Window 来等待用户登录</h3><h2 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h2><p>  运行级0：关机<br>  运行级1：单用户模式，系统出现问题时可使用这种模式进入系统维护，典型的使用场景是在忘记root密码时可进入此模式修改root密码<br>  运行级2：多用户模式，但是没有网络连接<br>  运行级3：完全多用户模式，这也是Linux服务器最常见的运行级<br>  运行级4：保留未使用<br>  运行级5：窗口模式，支持多用户，支持网络<br>  运行级6：重启</p><p>/etc/reX.d 下的文件分别以K（kill）或S（start）开头，后跟两位数字、再接服务名。<br>其实它们链接的是上层init.d目录中的服务脚本。<br>系统在启动过程中，会首先运行以K开头的脚本，全部运行完毕后在运行以S开头的脚本，在运行所有K开头的脚本时，又会严格按照K后面的数字大小依次来运行。也就是数字小的先运行。<br>只要定义好不同运行级需要启动和停止的服务，就可以让系统在不同的运行级下启动和关闭不一样的服务。 </p><h2 id="grub介绍"><a href="#grub介绍" class="headerlink" title="grub介绍"></a>grub介绍</h2><p>grub(Grand Unified Bootloader),事实上grub可以引导多个操作系统。<br>grub的启动是分成两段完成的。第一段以stage1作为主引导程序，他的主要任务是定位和装载第二段引导程序，并转交控制权，即stage2.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">boot=/dev/sda</span></span><br><span class="line">default=0      </span><br><span class="line">//默认从第一个title处启动</span><br><span class="line"></span><br><span class="line">timeout=5      </span><br><span class="line">//显示这个title项时，同时有五秒钟倒计时，五秒内可以按回车键提前从默认的启动项中启动，也可以上下键立即停止倒计时，选定一个title并启动。 </span><br><span class="line">//也可以选定一个title后，按e进入编辑模式，这样可以即时对grub进行配置，但是这时的配置不会写入配置文件中，而只是当时生效。</span><br><span class="line"></span><br><span class="line">splashimage=(ha0,0)/grub/splash.xpm.gz </span><br><span class="line">//指定启动时的背景图像，grub使用hd0代表第一块磁盘，（hd0,0）代表第一块磁盘的第一个分区。splash.xpm.gz是一个压缩文件，grub在启动时自动对该文件做解压缩。</span><br><span class="line"></span><br><span class="line">hiddenmenu     </span><br><span class="line">//设置启动时是否显示菜单</span><br><span class="line"></span><br><span class="line">title  CentOs (2.6.18-194.e15)  </span><br><span class="line">//title是系统引导时显示的名字，这是一种可识别的文字</span><br><span class="line"></span><br><span class="line">root (hd0,0) </span><br><span class="line">//指定了内核放置的分区</span><br><span class="line"></span><br><span class="line">kernel /vmlinuz-2.6.18-194.e15 ro root=LABEL=/ rhgb quiet </span><br><span class="line">//指定了内核的路径</span><br><span class="line">//vmlinuz-2.6.18-194.e15 内核文件</span><br><span class="line">//ro root=LABEL=/ rhgb quiet 是启动内核时向内核传入的参数</span><br><span class="line"></span><br><span class="line">initrd /initrd-2.6.18-194.e15.img            </span><br><span class="line">//指定了initrd文件的路径是initrd-2.6.18-194.e15.img文件</span><br></pre></td></tr></table></figure><p>initrd(boot loader initialized RAM disk)是系统启动时的临时文件系统。<br>kernel通过读取initrd来获得各种可执行文件和设备驱动，并挂载真实的文件系统，然后卸载这个临时文件系统。</p><h1 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h1><h2 id="用户分类"><a href="#用户分类" class="headerlink" title="用户分类"></a>用户分类</h2><p>普通用户：指所有使用Linux系统的真实用户，这类用户可以使用用户名及密码登录系统,普通用户的UID大于500<br>根用户：也就是root用户，ID是0，也也被称为超级用户<br>系统用户：指系统运行时必须有的用户，但并不是指真实的使用者,系统用户的ID范围是1~499</p><p>Linux下每个用户都至少属于一个组，可以用id命令查看UID<br>要确认自己所属的用户组，可以使用groups命令来获得<br>使用命令who看到目前登录在系统中的所有用户</p><h2 id="相关的配置文件"><a href="#相关的配置文件" class="headerlink" title="相关的配置文件"></a>相关的配置文件</h2><p>/etc/passwd:系统用来记录用户名<br>/etc/shadow:系统用来记录密码<br>/etc/group:系统用来记录用户组<br>/etc/sudoers:存放有执行sudo权限的用户<br>/etc/at.deny:存放禁止被使用at命令的用户<br>/etc/cron.deny:存放禁止被使用cron的用户<br>/etc/crontab:系统的例行任务</p><h2 id="新增和删除用户"><a href="#新增和删除用户" class="headerlink" title="新增和删除用户"></a>新增和删除用户</h2><h3 id="新增用户：useradd"><a href="#新增用户：useradd" class="headerlink" title="新增用户：useradd"></a>新增用户：useradd</h3><p>命令： useradd somebody<br>过程：首先，系统将用户信息记录到/etc/passwd中，一般会在/etc/passwd和/etc/shadow末尾追加一条记录，同时分配一个UID<br>      然后，为这个用户创建家目录并复制/etc/skel下所有的文件到家目录下<br>      最后，创建一个与该用户名一样的用户组<br>说明一点：系统在添加用户时，需要预先为这个用户创建一些默认的“配置文件”，而默认配置的就是/etc/skel目录下的几个隐藏文件。<br>          可以说，/etc/skel实际上是创建用户时的“模板”<br>相关参数：<br>-u 指定UID<br>-g 指定GID<br>-d 指定该用户的家目录</p><h3 id="修改密码：passwd"><a href="#修改密码：passwd" class="headerlink" title="修改密码：passwd"></a>修改密码：passwd</h3><h3 id="修改用户：usermod"><a href="#修改用户：usermod" class="headerlink" title="修改用户：usermod"></a>修改用户：usermod</h3><p>相关参数：<br>-d 修改家目录<br>-L 冻结操作<br>-U 解除冻结状态<br>-g 修改组</p><h3 id="删除用户：userdel"><a href="#删除用户：userdel" class="headerlink" title="删除用户：userdel"></a>删除用户：userdel</h3><p>使用这个命令将会删除用户在/etc/passwd和/etc/shadow中的记录<br>相关参数：-r 同时删除用户家目录和该用户的邮件&lt;一旦加上这个参数，该用户的相关文件就会被全部删除&gt;</p><h2 id="新增和删除用户组"><a href="#新增和删除用户组" class="headerlink" title="新增和删除用户组"></a>新增和删除用户组</h2><h3 id="增加用户组：groupadd"><a href="#增加用户组：groupadd" class="headerlink" title="增加用户组：groupadd"></a>增加用户组：groupadd</h3><h3 id="删除用户组：groupdel"><a href="#删除用户组：groupdel" class="headerlink" title="删除用户组：groupdel"></a>删除用户组：groupdel</h3><h2 id="检查用户信息"><a href="#检查用户信息" class="headerlink" title="检查用户信息"></a>检查用户信息</h2><h3 id="查看用户：users、who、w"><a href="#查看用户：users、who、w" class="headerlink" title="查看用户：users、who、w"></a>查看用户：users、who、w</h3><p>users命令可以查看当前系统有哪些用户<br>who命令来查看到更多的信息<br>w命令看到更详细的信息</p><h3 id="调查用户：finger"><a href="#调查用户：finger" class="headerlink" title="调查用户：finger"></a>调查用户：finger</h3><p>同样显示系统的登录用户</p><h2 id="用其他用户的身份执行命令：sudo"><a href="#用其他用户的身份执行命令：sudo" class="headerlink" title="用其他用户的身份执行命令：sudo"></a>用其他用户的身份执行命令：sudo</h2><p>&lt;修改文件：visudo&gt;<br>tovi ALL=(ALL) ALL指tovi用户（第一列）可以从任何地方登录后（第二列的ALL）执行任何人（第三列的ALL）的任何命令（第四列的ALL）。<br>%tovi ALL=(ALL) ALL 可以让所有属于tovi用户组的用户从任何地方登录后执行任何人的任何命令<br>tovi ALL=(ALL) NOPASSWD:ALL 这样用户在使用sudo时就不需要输入密码了</p><h2 id="执行任务管理"><a href="#执行任务管理" class="headerlink" title="执行任务管理"></a>执行任务管理</h2><h3 id="单一时刻执行一次任务：at"><a href="#单一时刻执行一次任务：at" class="headerlink" title="单一时刻执行一次任务：at"></a>单一时刻执行一次任务：at</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//定义从现在开始算，30分钟后安排一个任务</span><br><span class="line">at now + 30 minutes</span><br><span class="line">//到了时间后执行关机操作</span><br><span class="line">/sbin/shutdown -h now</span><br><span class="line">//使用了组合键Ctrl+D，表示输入结束</span><br><span class="line">&lt;EOF&gt;</span><br><span class="line">//系统提示有一个任务在这个时间执行</span><br><span class="line">job 1 at 2018-08-06 17:00</span><br></pre></td></tr></table></figure><p>相关命令：<br>atq：查看当前用at命令调度的任务列表<br>atrm：删除已经进入任务队列的任务</p><h3 id="周期性执行任务：cron"><a href="#周期性执行任务：cron" class="headerlink" title="周期性执行任务：cron"></a>周期性执行任务：cron</h3><p>首先要确定crond进程在运行，如果没有运行，需要先启动该进程<br>crontab -e 进入编辑模式<br>crontab -l 查看设置的任务<br>crontab -r 删除所有的任务</p><h1 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h1><p>Linux万物皆文件</p><h2 id="根目录下的各个目录及其作用"><a href="#根目录下的各个目录及其作用" class="headerlink" title="根目录下的各个目录及其作用"></a>根目录下的各个目录及其作用</h2><p>/bin:常见的用户指令<br>/boot:内核和启动文件<br>/dev:设备文件<br>/etc:系统和服务的配置文件<br>/home:系统默认的普通用户的家目录<br>/lib:系统函数库目录<br>/lost+found:ext3文件系统需要的目录，用于磁盘检查<br>/mnt:系统加载文件系统时常用的挂载点<br>/opt:第三方软件安装目录<br>/proc:虚拟文件系统<br>/root:root用户的家目录<br>/sbin:存放系统管理命令<br>/tmp:临时文件的存放目录<br>/usr:存放与用户直接相关的文件和目录<br>/media:系统用来挂载光驱等临时文件系统的挂载点</p><h2 id="文件的相关操作"><a href="#文件的相关操作" class="headerlink" title="文件的相关操作"></a>文件的相关操作</h2><h3 id="创建文件：touch"><a href="#创建文件：touch" class="headerlink" title="创建文件：touch"></a>创建文件：touch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename</span><br></pre></td></tr></table></figure><p>如果目录中已经存在了这个文件，那这个命令不会对当前的同名文件造成影响，它只会更新文件的创建时间属性。</p><h3 id="删除文件：rm"><a href="#删除文件：rm" class="headerlink" title="删除文件：rm"></a>删除文件：rm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm filename</span><br></pre></td></tr></table></figure><p>-r 删除目录<br>-f 强制删除，没有任何提醒</p><h3 id="移动或重命名文件：mv"><a href="#移动或重命名文件：mv" class="headerlink" title="移动或重命名文件：mv"></a>移动或重命名文件：mv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv filename category</span><br></pre></td></tr></table></figure><p>该命令还能重命名文件，mv还可以在移动文件的同时重命名文件<br>mv命令同样适用于目录，因为在Linux系统中目录也是一种“文件”</p><h3 id="查看文件：cat-concatenate"><a href="#查看文件：cat-concatenate" class="headerlink" title="查看文件：cat(concatenate)"></a>查看文件：cat(concatenate)</h3><h3 id="查看文件头：head"><a href="#查看文件头：head" class="headerlink" title="查看文件头：head"></a>查看文件头：head</h3><p>默认情况下，head将显示该文件前10行的内容<br>-n参数指定显示的行数</p><h3 id="查看文件尾：tail"><a href="#查看文件尾：tail" class="headerlink" title="查看文件尾：tail"></a>查看文件尾：tail</h3><p>默认情况下tail显示文件的最后10行内容<br>-n参数指定显示的行数<br>-f动态查看文件信息</p><h3 id="文件格式转换：dos2unix"><a href="#文件格式转换：dos2unix" class="headerlink" title="文件格式转换：dos2unix"></a>文件格式转换：dos2unix</h3><p>DOS to UNIX 的简写<br>当把Windows下的文本文件移动到Linux下时，会由于系统之间文本文件的换行符不同而造成文件再Linux下的读写操作有问题。</p><h2 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h2><h3 id="进入目录：cd"><a href="#进入目录：cd" class="headerlink" title="进入目录：cd"></a>进入目录：cd</h3><h3 id="创建目录：mkdir"><a href="#创建目录：mkdir" class="headerlink" title="创建目录：mkdir"></a>创建目录：mkdir</h3><p>-p一次性创建所有目录</p><h3 id="文件和目录复制：cp"><a href="#文件和目录复制：cp" class="headerlink" title="文件和目录复制：cp"></a>文件和目录复制：cp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp sourcefile targetfile</span><br></pre></td></tr></table></figure><p>-r 复制目录</p><h2 id="文件时间戳"><a href="#文件时间戳" class="headerlink" title="文件时间戳"></a>文件时间戳</h2><p>一旦发生写文件操作，该文件的时间戳将会立刻得到更新。<br>因此，可以利用这些特性来有选择性地备份一些文件，但是在实际的工作中必须将这些过程脚本化、自动化。<br>例如：可以创建一个time_stamp来当相对时间戳，每当其他文件的时间戳比time_stamp要新，就备份该文件，同时更新time_stamp的时间戳。</p><p>date:2018-08-07更新</p><h2 id="文件和目录的权限"><a href="#文件和目录的权限" class="headerlink" title="文件和目录的权限"></a>文件和目录的权限</h2><h3 id="查看文件或目录权限：ls"><a href="#查看文件或目录权限：ls" class="headerlink" title="查看文件或目录权限：ls"></a>查看文件或目录权限：ls</h3><p>-l参数表示要求ls命令列出每个文件的详细信息<br>-a参数要求ls命令列出隐藏文件<br>文件详细信息列表含义<br>第一列是文件类别和权限</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个字符表明该文件的类型：</span><br><span class="line">d      目录</span><br><span class="line">-      普通文件</span><br><span class="line">l      链接文件</span><br><span class="line">c      字符文件</span><br><span class="line">s      socket文件</span><br><span class="line"><span class="selector-tag">p</span>      管道文件</span><br><span class="line">后面的九个字符分别代表用户、文件所有组、其他成员对该文件所拥有的权限</span><br></pre></td></tr></table></figure><p>第二列代表“连接数”，除了目录文件之外，其他所有的文件连接数都是1，目录文件的连接数是该目录中包含其他目录的总个数+2<br>第三列代表文件的所有人<br>第四列代表该文件的所有组<br>第五列是该文件的大小<br>第六列是该文件的创建时间或最近修改日期<br>第七列是文件名</p><h3 id="文件隐藏属性：lsattr"><a href="#文件隐藏属性：lsattr" class="headerlink" title="文件隐藏属性：lsattr"></a>文件隐藏属性：lsattr</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsattr filename</span><br></pre></td></tr></table></figure><p>结果中的第一列是13个小短横，其中每一个小短横都是一个属性，如果当前位置上设置了该属性就会显示相对应的字符<br>设置文件隐藏属性：chattr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +a filename</span><br></pre></td></tr></table></figure><p>a属性：拥有这种属性的文件只能在尾部增加数据而不能被删除（root用户也不能删除）<br>i属性：拥有这种属性的文件将无法写入、改名、删除（root用户也不行）</p><h3 id="改变文件权限：chmod"><a href="#改变文件权限：chmod" class="headerlink" title="改变文件权限：chmod"></a>改变文件权限：chmod</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+r filename</span><br></pre></td></tr></table></figure><p>u:用户<br>g:用户所在组<br>o:其他用户<br>a:all<br>如果需要修改的不是一个文件而是一个目录，以及该目录下所有的文件、子目录、子目录下所有的文件和目录。<br>需要使用-R</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 754 filename</span><br></pre></td></tr></table></figure><h3 id="改变文件的拥有者：chown"><a href="#改变文件的拥有者：chown" class="headerlink" title="改变文件的拥有者：chown"></a>改变文件的拥有者：chown</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown user filename</span><br><span class="line">chown :group filename</span><br></pre></td></tr></table></figure><p>合起来就是 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown user:group filename</span><br></pre></td></tr></table></figure><p>如果需要修改的不是一个文件而是一个目录，以及该目录下所有的文件、子目录、子目录下所有的文件和目录。<br>需要使用-R </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R user:group filename</span><br></pre></td></tr></table></figure><h3 id="改变文件的拥有组：chgrp"><a href="#改变文件的拥有组：chgrp" class="headerlink" title="改变文件的拥有组：chgrp"></a>改变文件的拥有组：chgrp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp group filename</span><br></pre></td></tr></table></figure><p>如果需要修改的不是一个文件而是一个目录，以及该目录下所有的文件、子目录、子目录下所有的文件和目录。<br>需要使用-R </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R group filename</span><br></pre></td></tr></table></figure><h3 id="文件特殊属性：SUID-SGID-Sticky"><a href="#文件特殊属性：SUID-SGID-Sticky" class="headerlink" title="文件特殊属性：SUID/SGID/Sticky"></a>文件特殊属性：SUID/SGID/Sticky</h3><p>SUID：只能用于二进制文件，这意味着普通用户可以使用root的身份来执行这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+s filename</span><br></pre></td></tr></table></figure><p>SGID：如果某个二进制文件的用户组权限被设置了s权限，则该文件的用户组中所有的用户都能以该文件的用户身份去运行这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+s filename</span><br></pre></td></tr></table></figure><p>Sticky 只能用于设置在目录上，设置了这种权限的目录，任何用户都可以在该目录中创建或修改文件，但是只有该文件的创建者和root可以删除自己的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o+t somedir</span><br></pre></td></tr></table></figure><h3 id="默认权限和umask"><a href="#默认权限和umask" class="headerlink" title="默认权限和umask"></a>默认权限和umask</h3><p>对于root用户<br>文件的权限默认是644<br>目录的权限默认是755<br>对于普通用户<br>文件的权限默认是664<br>目录的权限默认是775<br>umask遮罩概念：不能一味地采用“同位相减”<br>正确概念是：<br>777用字符串表示为：rwxrwxrwx，如果遮罩值为022，用字符串表示为—-w–w-，那么最后权限表示为：rwxr-xr-x,也就是755<br>而用同位相减例子表示为：<br>666在遮罩值为011的情况下值为655，但实际上正确的权限值应该是666</p><h3 id="查看文件类型：file"><a href="#查看文件类型：file" class="headerlink" title="查看文件类型：file"></a>查看文件类型：file</h3><p>file命令可以直接告诉我们文件类型，还能给出更多的文件信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file /tmp </span><br><span class="line">/tmp: sticky directory</span><br></pre></td></tr></table></figure><h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><h3 id="一般查找：find"><a href="#一般查找：find" class="headerlink" title="一般查找：find"></a>一般查找：find</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find PATH -name filename 在PATH下查找文件名为filename的文件</span><br><span class="line">-perm                   根据文件权限查找</span><br><span class="line">-user username          根据用户名查找</span><br><span class="line">-mtime -n/+n            查找n天内/n天前更改过的文件</span><br><span class="line">-atime -n/+n            查找n天内/n天前访问过的文件</span><br><span class="line">-ctime -n/+n            查找n天内/n天前创建的文件</span><br><span class="line">-newer filename         查找更改时间比filename新的文件</span><br><span class="line">-type b/d/c/p/l/f/s     查找块/目录/字符/管道/链接/普通/套接字文件</span><br><span class="line">-size                   根据文件大小查找</span><br><span class="line">-depth n                最大的查找目录深度</span><br></pre></td></tr></table></figure><h3 id="数据库查找：locate"><a href="#数据库查找：locate" class="headerlink" title="数据库查找：locate"></a>数据库查找：locate</h3><p>locate依赖于一个数据库文件。<br>Linux系统默认每天会检索一下系统中的所有文件，然后将检索到的文件记录到数据库中。<br>在执行这个命令之前一般要先执行一下updatedb命令（这不是必须的，因为系统每天会自动检索并更新数据库信息，但有时会因为文件发生了变化而系统还没有再次更新而无法找到实际上确实存在的文件。<br>所以有时需要主动运行该命令，以创建最新的文件列表数据库。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate httpd.conf</span><br></pre></td></tr></table></figure><p>查找执行文件：which/whereis<br>which用于从系统的PATH变量所定义的目录中查找可执行文件的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which passwd</span><br></pre></td></tr></table></figure><p>whereis也能查到路径，他不但能找出其二进制文件，还能找出相关的man文件</p><h2 id="文件压缩和打包"><a href="#文件压缩和打包" class="headerlink" title="文件压缩和打包"></a>文件压缩和打包</h2><h3 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a>gzip/gunzip</h3><p>gzip/gunzip 用来压缩和解压缩单个文件的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip filename =&gt; 生成文件filename.gz</span><br><span class="line">gunzip filename.gz 解压缩 =&gt; 解压缩后文件为filename</span><br></pre></td></tr></table></figure><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>tar不但可以打包文件，还可以将整个目录中的全部文件整合成一个包。<br>整合包的同时还能使用gzip功能进行压缩。<br>整合后的包习惯使用.tar作为后缀名，使用gzip压缩后的文件则使用.gz作为后缀名<br>tar -zcvf boot.tgz /boot<br>-z 使用gzip压缩<br>-c 创建压缩文件<br>-v 显示当前被压缩的文件<br>-f 使用文件名<br>-x 解压的意思</p><p>解压缩的时候使用-C参数指定压缩后的目录存放位置</p><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h3><p>压缩文件，默认产生以.bz2扩展名结尾的文件<br>-z 进行压缩<br>-d 进行解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -z filename</span><br></pre></td></tr></table></figure><h3 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h3><p>一般不单独使用，需要和find命令一同使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">备份：</span><br><span class="line">find /etc -name *.conf | cpio -cov &gt; /tmp/conf.cpio</span><br><span class="line">还原：</span><br><span class="line">cpio --absolute-filenames -icvu &lt; /tmp/conf.cpio</span><br></pre></td></tr></table></figure><p>当由find按照条件找出需要备份的文件列表后，使用管道的方式传递给cpio进行备份,生成/tmp/conf.cpio文件。<br>然后再将生成的/tmp/conf.cpio文件中包含的文件列表完全还原回去。</p><h1 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h1><p>Linux中采用的是文件系统+虚拟文件系统（Virtual File System,VFS）</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="什么是文件系统"><a href="#什么是文件系统" class="headerlink" title="什么是文件系统"></a>什么是文件系统</h3><p>文件系统是操作系统用于明确磁盘或分区上相关文件的方法和数据结构。<br>即在磁盘上组织文件的方法。<br>在使用前，都需要针对磁盘做初始化操作，并将记录的数据结构写到磁盘上，这种操作就是建立文件系统，在有些操作系统中称之为格式化。<br>大部分Linux系统都具有类似的通用结构，包括超级块（superblock）、i节点（iNode）、数据块（data block）、目录块（directory block）等。<br>超级块包括文件系统的总体信息，是文件系统的核心，所以在磁盘中会有多个超级块，以防止由于磁盘出现坏块导致全部文件系统无法使用。<br>i节点存储所有与文件有关的元数据，也就是文件所有者、权限等属性数据以及指向的数据块。但是不包括文件名和文件内容。<br>数据块是真实存放文件数据的部分，一个数据块默认情况下是4KB。<br>目录块包括文件名和文件在目录中的位置，并包括文件的i节点信息。</p><h3 id="ext2文件系统简介"><a href="#ext2文件系统简介" class="headerlink" title="ext2文件系统简介"></a>ext2文件系统简介</h3><p>The second extended file system<br>该文件系统具有极好的存储性能，但不支持日志功能</p><h3 id="ext3文件系统简介"><a href="#ext3文件系统简介" class="headerlink" title="ext3文件系统简介"></a>ext3文件系统简介</h3><p>为了弥补ext2文件系统的不足，有日志功能的ext3文件系统应运而生。<br>完全兼容ext2文件系统。<br>日志文件系统使用了“两阶段提交”的方式来维护待处理的事务。<br>在写入数据之前，文件系统会先在日志中写入相关记录信息，然后再开始真实地写数据，写完数据后则会将之前写入日志中的内容删除。<br>这样一来，如果遇到问题需要检查文件系统或对ext3文件系统进行修复时，只需要检查日志即可。<br>虽然在存取数据的时候ext3文件系统由于增加了日志功能要比ext2文件系统所做的写入操作多，但是ext3对写操作做了优化，使其性能不会比ext2低。</p><h2 id="磁盘分区、创建文件系统、挂载"><a href="#磁盘分区、创建文件系统、挂载" class="headerlink" title="磁盘分区、创建文件系统、挂载"></a>磁盘分区、创建文件系统、挂载</h2><p>磁盘使用前需要进行分区操作。磁盘的分区分成两类，即主分区和扩展分区。<br>受限制于磁盘的分区表大小（MBR大小为512字节，其中分区表占64字节），由于每个分区信息使用16字节，所以一块磁盘最多只能创建4个主分区。<br>为了支持更多分区，可以使用扩展分区，即扩展分区中划分更多逻辑分区，但是分区还是要受主分区+扩展分区最多不能超过4个的限制。<br>在完成磁盘分区后，需要进行创建文件系统的操作，最后将该分区挂载到系统中的某个挂载点才可以使用。</p><h3 id="创建文件系统：fdisk"><a href="#创建文件系统：fdisk" class="headerlink" title="创建文件系统：fdisk"></a>创建文件系统：fdisk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l 查看磁盘</span><br></pre></td></tr></table></figure><p>分区操作：<br>fdisk /dev/sdb 开始分区<br>输入字母n,这个字母代表new 也就是新建分区<br>然后选择是创建扩展分区还是主分区<br>在partition number中输入数字1，代表是第一个分区<br>下面输入第一个柱面开始的地方以及最后一个柱面的位置<br>最后输入字母w，代表将刚刚创建的分区写入分区表</p><p>格式化文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext3 /dev/sdb1 或 mkfs.ext3 /dev/sdb1</span><br></pre></td></tr></table></figure><h3 id="磁盘挂载：mount"><a href="#磁盘挂载：mount" class="headerlink" title="磁盘挂载：mount"></a>磁盘挂载：mount</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//DEVICE指的是具体的设备 MOUNT_POINT指的是挂载点，挂载点只能是目录</span><br><span class="line">mount DEVICE MOUNT_POINT</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir newDisk</span><br><span class="line">mount /dev/sdb1 newDisk</span><br></pre></td></tr></table></figure><p>mount:没有参数的mount会显示所有挂载</p><h3 id="设置启动自动挂载：-etc-fstab"><a href="#设置启动自动挂载：-etc-fstab" class="headerlink" title="设置启动自动挂载：/etc/fstab"></a>设置启动自动挂载：/etc/fstab</h3><p>之前使用的mount命令挂载的设备在你重启计算机之后就会消失，必须通过配置/etc/fstab使得系统在重启后能自动挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "/dev/sdb1 /root/newDisk ext3 defaults 0 0" &gt;&gt;/etc/fstab</span><br></pre></td></tr></table></figure><p>其中defaults是使用系统默认的挂载参数。<br>第一个0是决定dump命令在进行备份的时候是否要将这个分区存档。<br>第二个0是设定系统启动时是否对该设备进行fsck:1保留给根分区，其他分区使用2（检查完根分区后检查）或者0（不检查）。<br>这样系统重启后，设备就会自动挂载了。</p><h3 id="磁盘检验：fsck、badblocks"><a href="#磁盘检验：fsck、badblocks" class="headerlink" title="磁盘检验：fsck、badblocks"></a>磁盘检验：fsck、badblocks</h3><p>当磁盘出现逻辑错误时，可以使用fsck来尝试修复。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//TYPE可以是ext2、ext3，最后接设备的全路径(类似于 /dev/sdb1)</span><br><span class="line">fsck -t TYPE /DEVICE/PATH</span><br></pre></td></tr></table></figure><p>fsck在检查磁盘的时候，需要磁盘是未挂载状态，否则会造成文件系统损坏。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//umount(解除挂载操作),umount命令参数可以是设备路径或者是挂载点</span><br><span class="line">umount /DEVICE/PATH</span><br><span class="line">umount MOUNT_POINT</span><br></pre></td></tr></table></figure><p>如果系统的根文件系统出现问题怎么办？因为系统在运行的时候，根是无法被umount的。<br>这时候只能重新启动计算机，因为如果确认根文件系统出现问题，系统在重启的时候就会检测到这个问题，然后提示用户输入root密码进入单用户模式，然后就可以用fsck来修复根文件系统了。</p><p>badblocks主要用来检测磁盘的物理坏道，使用这个命令其实更多的只是确认磁盘是否有坏道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">badblocks -v /dev/sdb1</span><br></pre></td></tr></table></figure><h2 id="Linux逻辑卷"><a href="#Linux逻辑卷" class="headerlink" title="Linux逻辑卷"></a>Linux逻辑卷</h2><p>为了更好地使用磁盘空间，提高系统空间的可扩展性，此时就需要使用逻辑卷。</p><h3 id="什么是逻辑卷"><a href="#什么是逻辑卷" class="headerlink" title="什么是逻辑卷"></a>什么是逻辑卷</h3><p>逻辑卷就是使用逻辑卷组管理（Logic Volume Manager）创建出来的设备。<br>实际上，LVM是介于硬盘裸设备和文件系统的中间层。<br>物理卷（Physical Volume，PV）：也就是物理磁盘分区，比如说/dev/sdb1。<br>如果要想使用LVM来管理这个物理卷，可使用fdisk工具将其ID改为LVM可以识别的值。<br>卷组（Volume Group，VG）：也就是PV的集合。<br>逻辑卷（Logic Volume，LV）：也就是PV中划出来的一块逻辑磁盘。<br>也就是说：首先创建一个或多个物理卷，物理卷按照相同（或不同）的组名称聚集成一个（或多个）物理卷组，而逻辑卷就是从某个物理卷组中抽象出来的一块磁盘空间。</p><p>date:2018-08-08更新</p><h3 id="如何制作逻辑卷"><a href="#如何制作逻辑卷" class="headerlink" title="如何制作逻辑卷"></a>如何制作逻辑卷</h3><p>分区和制作PV、VG的过程中会消耗一部分磁盘空间</p><h4 id="创建物理卷：pvcreate、pvdisplay"><a href="#创建物理卷：pvcreate、pvdisplay" class="headerlink" title="创建物理卷：pvcreate、pvdisplay"></a>创建物理卷：pvcreate、pvdisplay</h4><p>首先添加一定大小的磁盘，然后分区，再然后需要修改各个分区的ID值为8e</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdc</span><br></pre></td></tr></table></figure><p>输入字母t,并选择相应的分区，选择L来获取list code，选择8e设置为逻辑卷，按下w，将修改写入分区表。<br>经过上面的步骤，/dev/sdc1就具备了成为PV的条件。<br>使用pvcreate将分区/dev/sdc1创建为PV</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sdc1</span><br></pre></td></tr></table></figure><p>可以执行pvscan查看系统所有的物理卷。<br>使用pvdisplay可以更详细地显示PV的使用状态</p><h4 id="创建并查询卷组：vgcreate、vgdisplay"><a href="#创建并查询卷组：vgcreate、vgdisplay" class="headerlink" title="创建并查询卷组：vgcreate、vgdisplay"></a>创建并查询卷组：vgcreate、vgdisplay</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgcreate 卷组名 /dev/sdc1 /dev/sdc2</span><br></pre></td></tr></table></figure><p>可以执行vgscan命令来搜索当前系统上所有的VG<br>使用vgdisplay可以看见更详细的信息</p><h4 id="扩展卷组：vgextend"><a href="#扩展卷组：vgextend" class="headerlink" title="扩展卷组：vgextend"></a>扩展卷组：vgextend</h4><p>可以使用vgextend随时扩大VG的容量<br>首先要将/dev/sdc3做成PV</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend 需要增加的VG名 /dev/sdc3</span><br></pre></td></tr></table></figure><h4 id="创建逻辑卷：lvcreate、lvdisplay"><a href="#创建逻辑卷：lvcreate、lvdisplay" class="headerlink" title="创建逻辑卷：lvcreate、lvdisplay"></a>创建逻辑卷：lvcreate、lvdisplay</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//-L指定逻辑卷的大小 后跟的SIZE表示具体的逻辑卷大小</span><br><span class="line">//-n为指定逻辑卷的名字，最后的参数VG_NAME是指从什么卷组中分配空间</span><br><span class="line">lvcreate -L SIZE -n LV_NAME VG_NAME</span><br></pre></td></tr></table></figure><p>可以用lvdisplay查看逻辑卷的使用情况</p><h4 id="创建文件系统并挂载"><a href="#创建文件系统并挂载" class="headerlink" title="创建文件系统并挂载"></a>创建文件系统并挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建文件系统</span><br><span class="line">mkfs.ext3 /dev/卷组名/逻辑卷名</span><br><span class="line">//创建一个挂载点</span><br><span class="line">mkdir /root/newLV</span><br><span class="line">//挂载</span><br><span class="line">mount /dev/卷组名/逻辑卷名 /root/newLV</span><br></pre></td></tr></table></figure><h2 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h2><h3 id="什么是硬链接"><a href="#什么是硬链接" class="headerlink" title="什么是硬链接"></a>什么是硬链接</h3><p>硬链接（hard link）又称实际链接，是指通过索引节点来进行链接。<br>在Linux文件系统中，所有的文件都会有一个编号，称为inode，多个文件名指向同一个索引节点是被允许的，这种链接就是硬链接。<br>硬链接的作用是允许一个文件拥有多个有效路径名，用户可以建立硬链接指向同一个文件，删除一个硬链接并不会影响索引节点本身和其他的链接，只有当最后一个链接被删除时，文件的数据块及目录的链接才会被释放。<br>文件真正删除的前提条件是与之相关的所有硬链接均被删除。<br>两个限制：<br>不允许给目录创建硬链接。<br>只有在同一文件系统中的文件之间才能创建链接，不同分区上的两个文件之间不能够建立硬链接。</p><p>ln命令创建硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln 文件名 硬链接名称</span><br></pre></td></tr></table></figure><p>ls 后的-i参数可以显示文件的inode<br>每增加一个硬链接，源文件的关联数就会加一，当此数为0时，该文件才能真正被文件系统删除。</p><h3 id="什么是软链接"><a href="#什么是软链接" class="headerlink" title="什么是软链接"></a>什么是软链接</h3><p>软链接（soft link）又称符号链接（symbolic link），是一个包含了另一个文件路径名的文件，可以指向任意的文件或目录，也可以跨越不同的文件系统。<br>删除软链接并不会删除其所指向的源文件，如果删除了源文件则软链接会出现“断链”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建软链接，使用了-s参数</span><br><span class="line">ln -s 文件名 软链接名称</span><br></pre></td></tr></table></figure><p>你会发现软链接的iNode和源文件的iNode不同，这说明软链接本身就是一个文件。</p><h1 id="字符处理"><a href="#字符处理" class="headerlink" title="字符处理"></a>字符处理</h1><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>Linux中的管道是一个固定大小的缓冲区，该缓冲区的大小为1页，即4KB。<br>管道表现为输入输出重定向的一种方法，它可以把一个命令的输出内容当做下一个内容的输入内容，两个命令之间只需要使用管道符连接即可。<br>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//ls -l命令输出的内容作为下一个命令more的输入</span><br><span class="line">ls -l /etc/init.d  | more</span><br></pre></td></tr></table></figure><h2 id="使用grep搜索文本"><a href="#使用grep搜索文本" class="headerlink" title="使用grep搜索文本"></a>使用grep搜索文本</h2><p>使用该工具时，如果匹配到相关信息就会打印出符合条件的所有行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 参数 '需要匹配的字符' 文件名</span><br></pre></td></tr></table></figure><p>参数列表：<br>-i 不区分大小写<br>-c 统计包含匹配的行数<br>-n 输出行号<br>-v 反向匹配</p><h2 id="使用sort排序"><a href="#使用sort排序" class="headerlink" title="使用sort排序"></a>使用sort排序</h2><p>对无序的数据进行排序<br>//对输出内容直接排序时，默认按照每行的第一个字符进行排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort 参数 文件名</span><br></pre></td></tr></table></figure><p>参数列表：<br>-n 采取数字排序<br>-t 指定分隔符<br>-k 指定第几列<br>-r 反向排序</p><h2 id="使用uniq删除重复内容"><a href="#使用uniq删除重复内容" class="headerlink" title="使用uniq删除重复内容"></a>使用uniq删除重复内容</h2><p>删除重复行，同时还可以统计出完全相同的行出现的总次数。<br>但是uniq只会对比相邻的行，如果相同的行非连续，则uniq不具备删除功能。<br>一般uniq和sort一起使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uniq 参数 文件名</span><br></pre></td></tr></table></figure><p>参数列表：<br>-i 忽略大小写<br>-c 计算重复行数</p><h2 id="使用cut截取文本"><a href="#使用cut截取文本" class="headerlink" title="使用cut截取文本"></a>使用cut截取文本</h2><p>它能处理的对象是“一行”文本，可从中选取出用户所需要的部分。<br>cut -f 指定的列 -d ‘分隔符’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用:分隔开的第一列</span><br><span class="line">cat /etc/passwd | cut -f1 -d':'</span><br></pre></td></tr></table></figure><p>cut还可以打印指定的字符<br>cut -c 指定列的字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打印出每行第1个字符</span><br><span class="line">cat /etc/passwd | cut -c1</span><br></pre></td></tr></table></figure><h2 id="使用tr做文本转换"><a href="#使用tr做文本转换" class="headerlink" title="使用tr做文本转换"></a>使用tr做文本转换</h2><p>主要作用在于文本转换或删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将文件/etc/passwd中的小写字母转换成大写字母</span><br><span class="line">cat /etc/passwd | tr '[a-z]' '[A-Z]'</span><br></pre></td></tr></table></figure><h2 id="使用paste做文本合并"><a href="#使用paste做文本合并" class="headerlink" title="使用paste做文本合并"></a>使用paste做文本合并</h2><p>作用在于将文件按照行进行合并，中间用tab隔开。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste 文件1 文件2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//使用-d指定在合并文件时行间的分隔符</span><br><span class="line">paste -d: 文件1 文件2</span><br><span class="line">//最后合并中间会有一个：</span><br></pre></td></tr></table></figure><h2 id="使用split分割大文件"><a href="#使用split分割大文件" class="headerlink" title="使用split分割大文件"></a>使用split分割大文件</h2><p>支持按照行数分割和按照大小分割这两种模式。<br>由于二进制文件没有“行”的概念，所以二进制文件只能按照文件大小进行分割。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//-l 按照行进行分割</span><br><span class="line">//分割完成后，会生成很多小文件</span><br><span class="line">split -l 行数 源文件 小文件</span><br><span class="line">//-b 按照大小分割</span><br><span class="line">split -b 大小 源文件 小文件</span><br></pre></td></tr></table></figure><h1 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h1><p>检查或自主配置网络相关参数，需要掌握相关网络配置命名和方法。</p><h2 id="网络接口配置"><a href="#网络接口配置" class="headerlink" title="网络接口配置"></a>网络接口配置</h2><h3 id="使用ifconfig检查和配置网卡"><a href="#使用ifconfig检查和配置网卡" class="headerlink" title="使用ifconfig检查和配置网卡"></a>使用ifconfig检查和配置网卡</h3><p>ifconfig会输出当前系统中所有处于活动状态的网络接口<br>参数列表：<br>-a 显示所有包括不活动的网卡</p><p>eth0代表以太网的第一块网卡<br>eth Ethernet，代表以太网，0代表第一块网卡。<br>link encap指封装方式为以太网。<br>HWaddr是指网卡的硬件地址（MAC地址）。<br>inet addr指该网卡当前的IP地址。<br>Broadcast是广播地址（一般不需要手动设置，根据IP和掩码可以算出）。<br>Mask是指掩码。<br>UP说明该网卡目前处于活动状态<br>MTU代表最大的存储单元，即此网卡一次所能传输的最大分包。<br>RX和TX分别代表接收和发送的包<br>collision代表发送的冲突数，发现值不为0则很有可能网络存在故障<br>txqueuelen代表传输缓冲区长度大小</p><p>第二个设备是lo，表示主机的环回地址，用于本地通信。</p><p>手工指定eth0的IP地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 IP地址 netmask 子网掩码</span><br><span class="line">ifconfig eth0 192.168.159.130 netmask 255.255.255.0</span><br><span class="line">//即 </span><br><span class="line">ifconfig eth0 192.168.159.130/24</span><br></pre></td></tr></table></figure><p>计算机网络相关知识（由IP地址和掩码求广播地址）：<br>从192可知是一个C类IP地址，网络位是24位<br>从子网掩码可以看出这是一个/24的网络，所以子网位是25-25=0位<br>主机地址是8位<br>当主机地址全为1时我们将地址作为子网广播地址<br>所以，广播地址为192.168.159.255</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//手工断开/启用网卡</span><br><span class="line">ifconfig eth0 down </span><br><span class="line">ifconfig eth0 up</span><br><span class="line">等同于</span><br><span class="line">ifdown eth0</span><br><span class="line">ifup eth0</span><br></pre></td></tr></table></figure><h3 id="将IP配置信息写入配置文件"><a href="#将IP配置信息写入配置文件" class="headerlink" title="将IP配置信息写入配置文件"></a>将IP配置信息写入配置文件</h3><p>用ifconfig 命令配置的网卡IP属于动态配置，信息只是保存在当前运行的内核中。<br>一旦重启，信息将丢失，所以我们需要在配置文件中保存这些信息。<br>配置文件：/etc/sysconfig/network-scripts/<br>从里面选择相应的网卡信息。</p><p>其中：<br>DEVICE 变量定义了设备的名称<br>BOOTPROTO变量定义了获取IP的方式，BOOTPROTO=dhcp的含义是：系统在启用这块网卡的时候，IP将会通过dhcp的方式获得，有一个可选值是static，表示静态设置IP<br>ONBOOT变量定义了启动时是否激活使用该设备</p><p>如果设置静态IP，则：<br>…<br>BOOTPROTO=static<br>…<br>IPADDR=你设置的IP地址<br>NETMASK=你设置的子网掩码</p><p>设置完后，推荐使用重启网络服务的方式生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h2 id="路由和网关设置"><a href="#路由和网关设置" class="headerlink" title="路由和网关设置"></a>路由和网关设置</h2><p>Linux主机之间是使用IP进行通信的。<br>如果两台主机同在一个网段且网卡都处于激活状态，则它们具备直接通信的能力（通过交换机或简易HUB）。<br>如果两台主机不在同一个网段，则需要通过路由器才能通信。<br>路由器属于IT设备的基础设备，每一个网段都应该至少有一个网关。<br>如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。<br>可使用route命令添加默认网关。<br>参数列表：<br>-n 查看系统当前的路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">route add default gw 网关地址</span><br><span class="line">//将add改成del，就能删除添加的路由</span><br><span class="line">//也可简写为</span><br><span class="line">route del default</span><br></pre></td></tr></table></figure><p>//需要写入配置文件中才能永久保存（写入/etc/sysconfig/network也行），在上面的配置文件中添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY = 网关地址</span><br></pre></td></tr></table></figure><h2 id="DNS客户端配置"><a href="#DNS客户端配置" class="headerlink" title="DNS客户端配置"></a>DNS客户端配置</h2><h3 id="etc-hosts"><a href="#etc-hosts" class="headerlink" title="/etc/hosts"></a>/etc/hosts</h3><p>用hosts文件来记录主机名和IP的对应关系。<br>主要作用：<br>加快域名解析。当访问网站时，系统会首先查看hosts文件中的记录，如果存在则直接解析出对应的IP，这时就不需要请求DNS服务器。<br>方便小型局域网用户使用的内部设备。</p><h3 id="etc-resolv-conf"><a href="#etc-resolv-conf" class="headerlink" title="/etc/resolv.conf"></a>/etc/resolv.conf</h3><p>DNS就是全互联网上主机名及其IP地址对应关系的数据库。<br>nameserver关键字后面跟一个DNS主机的IP地址，可以设置2~3个nameserver，主机在查询域名的时候会先查询第一个DNS，查询不到再查询第二个。<br>search关键字后紧跟一个域名，每个主机严格来说都有一个FQDN（全限定域名）。且这个关键字后面可以跟多个域名。<br>domain关键字和search类似，不同的是domain只能跟一个域名。</p><h2 id="网络测试工具"><a href="#网络测试工具" class="headerlink" title="网络测试工具"></a>网络测试工具</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>ping的目的在于测试另一台主机是否可达。<br>ping命令发送的是一个ICMP的echo请求包，对端主机在接收到后会回应一个ICMP的reply回应包。<br>参数列表：<br>-c 指定ping的次数<br>-i 指定ping包的发送间隔<br>-w 如果ping没有回应，则在指定超时时间后退出</p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p>用来查询DNS记录，如果使用域名作为host的参数，命令返回该域名的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host www.baidu.com</span><br></pre></td></tr></table></figure><p>以上命令还可以有第二个参数，这个参数必须是一个可用的DNS服务器，也就是用命令指定的DNS查询域名，而不是用/etc/resolv.conf文件中定义的DNS查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host www.baidu.com 8.8.8.8</span><br></pre></td></tr></table></figure><h3 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h3><p>TTL(Time to Live):IP 数据包的生命值。<br>当IP数据包在网络上传输时，每经过一个路由器该值就减1，当值减为0时此包就会被路由器丢弃。<br>防止由于某种原因始终无法到达目的地的包不断在互联网上传递，减少无谓的网络资源消耗。<br>路由器在将TTL为0的包丢弃同时发送该IP数据包的主机一个ICMP“超时”消息，主机在接收这个ICMP包后同时能知道该路由的IP地址。<br>命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute hostname</span><br></pre></td></tr></table></figure><h3 id="常见网络故障排查"><a href="#常见网络故障排查" class="headerlink" title="常见网络故障排查"></a>常见网络故障排查</h3><h4 id="第一步确认网卡本身是否能工作"><a href="#第一步确认网卡本身是否能工作" class="headerlink" title="第一步确认网卡本身是否能工作"></a>第一步确认网卡本身是否能工作</h4><p>ping 127.0.0.1<br>127.0.0.1被称为主机的回环接口，是TCP/IP 协议栈正常工作的前提</p><h4 id="第二步确认网卡是否出现了物理或驱动故障"><a href="#第二步确认网卡是否出现了物理或驱动故障" class="headerlink" title="第二步确认网卡是否出现了物理或驱动故障"></a>第二步确认网卡是否出现了物理或驱动故障</h4><p>ping 本机IP地址</p><h4 id="第三步确认能否ping通同网段的其他主机"><a href="#第三步确认能否ping通同网段的其他主机" class="headerlink" title="第三步确认能否ping通同网段的其他主机"></a>第三步确认能否ping通同网段的其他主机</h4><p>主要来确认二层网络设备（交换机或HUB）工作是否正常</p><h4 id="第四步确认能否ping通网关IP"><a href="#第四步确认能否ping通网关IP" class="headerlink" title="第四步确认能否ping通网关IP"></a>第四步确认能否ping通网关IP</h4><p>如果数据包能正常到达网关，说明主机和本地网络都工作正常</p><h4 id="第五步确认能否ping通公网上的IP"><a href="#第五步确认能否ping通公网上的IP" class="headerlink" title="第五步确认能否ping通公网上的IP"></a>第五步确认能否ping通公网上的IP</h4><p>如果可以说明本地的路由设置正确</p><h4 id="第六步查看能否ping通公网上的某个域名"><a href="#第六步查看能否ping通公网上的某个域名" class="headerlink" title="第六步查看能否ping通公网上的某个域名"></a>第六步查看能否ping通公网上的某个域名</h4><p>如果成功说明DNS部分设置正确</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><p>（详情见操作系统相关知识）<br>进程是操作系统当前运行的程序，是操作系统进行资源调度和分配的一个独立单位。<br>所有的进程都可能存在3种状态：运行态、就绪态、阻塞态。<br>运行态表明程序当前实际占用CPU等资源。<br>就绪态表明程序除CPU之外的一切运行资源都已经就绪，等待操作系统分配CPU资源。<br>阻塞态表明程序在运行的过程中由于需要请求外部资源（如I/O操作、打印机等低速或同一时刻只能独享的资源）而当前无法继续执行，从而主动放弃当前CPU资源转而等待所请求资源。</p><p>进程之间存在互斥和同步的关系。<br>互斥即类似于两个进程不能同时使用同一部打印机打印文件。<br>同步是指进程间通过某种通信机制实现信息交互。</p><h2 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h2><p>程序：对一系列动作执行过程的描述，所以程序只是指令的有序集合，是一个静态的概念。</p><h2 id="进程的观察：ps、top"><a href="#进程的观察：ps、top" class="headerlink" title="进程的观察：ps、top"></a>进程的观察：ps、top</h2><p>ps查看当前查询状态下进程瞬间的状态信息。<br>参数列表（列出一些常用的）：<br>-A  列出所有的进程<br>-a  列出不和本终端有关的所有进程<br>-w  显示加宽可以显示较多的信息<br>-u  显示有效使用者相关的进程<br>aux 显示所有包含其他使用者的进程</p><p>top提供了实时的系统状态监控</p><h2 id="进程的终止：kill、killall"><a href="#进程的终止：kill、killall" class="headerlink" title="进程的终止：kill、killall"></a>进程的终止：kill、killall</h2><p>终止进程。<br>原理是向内核发送一个系统操作信号以及某个进程的标识号，使得内核对指定标识号的进程进行相应的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kill 进程ID</span><br><span class="line">//停止系统中所有的&lt;进程的名字&gt;进程</span><br><span class="line">killall 进程的名字</span><br><span class="line">//使用pidof可以快速来寻找进程的PID</span><br><span class="line">pidof dhcpd</span><br></pre></td></tr></table></figure><p>参数列表：<br>-l 可以查看可跟的信号代码，一般使用3个，即HUP（1）重启、KILL（9）强制杀掉、TERM（15）正常结束</p><h2 id="查询进程打开的文件：lsof"><a href="#查询进程打开的文件：lsof" class="headerlink" title="查询进程打开的文件：lsof"></a>查询进程打开的文件：lsof</h2><p>lsof(list open file)是一个列出当前系统中所有打开文件的工具。<br>该命令需要用root账号来执行，因为lsof在运行时需要访问很多核心文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof 参数 filename</span><br></pre></td></tr></table></figure><p>参数列表：<br>lsof filename 显示打开指定文件的所有进程<br>lsof -c string 显示COMMAND列中包含指定字符的进程所有打开的文件<br>lsof -u username 显示所属于user进程打开的文件<br>lsof -g gid 显示归属于gid的进程情况<br>…</p><p>lsof有一个很实用的功能，就是可以通过其恢复被删除的文件————但这是有条件的，必须是文件正在被某个进程使用，而且该进程未停止（也就是依然拥有打开文件的句柄）。<br>例：假设文件/var/log/messages不小心被删除了，而且有进程正在使用这个文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof | grep messages =&gt;查看使用进程的PID</span><br><span class="line">cat /proc/PID/fd/2 &gt; /var/log/messages</span><br><span class="line">Service syslogd restart</span><br></pre></td></tr></table></figure><h2 id="进程优先级调整：nice、renice"><a href="#进程优先级调整：nice、renice" class="headerlink" title="进程优先级调整：nice、renice"></a>进程优先级调整：nice、renice</h2><p>top中有一个NI字段和PR字段。<br>NI字段标记了对应进程的优先级，数值范围是-20~19，数值越低优先级越高，如果一个进程在启动时并没有设定nice优先级，则默认使用0。<br>普通用户可以给自己的进程设定nice优先级，但范围仅限于0~19。<br>PR字段也是进程的优先级。<br>Linux 使用了“动态优先级”的调度算法来确定每一个进程的优先级，一个进程的最终优先级=优先级+nice优先级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//nice命令仅限于在启动一个进程的时候同时赋予其nice优先级</span><br><span class="line">nice -n -10 ./job.sh</span><br><span class="line">对于已经启动的进程，可以使用renice命令进行修改，不过需要先查询出该///进程的PID</span><br><span class="line">renice -10 -p PID</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux的特点&lt;br&gt;1.免费开源&lt;br&gt;2.模块化程度高&lt;br&gt;3.广泛的硬件支持&lt;br&gt;4.安全稳定&lt;br&gt;5.多用户、多任务&lt;br&gt;点击下方阅读，进入Linux的世界&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习</title>
    <link href="http://yoursite.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/02/数据库学习/</id>
    <published>2018-08-02T02:40:00.000Z</published>
    <updated>2018-08-02T03:35:32.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。<br>事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。<br><a id="more"></a><br>事务的定义：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></p><p>事务的特性：（ACID）<br>Atomicity 原子性：要么不做，要么全做。<br>Consistency 一致性：从一个一致状态到另一个一致状态。<br>Isolation 隔离性：一个事务不能被其他事务干扰，并发控制就是为了保证事务的隔离性。<br>Durability 持久性：事务一旦提交，它对数据库中数据的改变是持久的。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><p>Oracle建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table1 (</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   varchar2(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table1 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DB2建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table2(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table2 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>informix建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table3(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>) <span class="keyword">constraint</span> table3</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="视图语句"><a href="#视图语句" class="headerlink" title="视图语句"></a>视图语句</h3><p>创建视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> t <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> b;</span><br></pre></td></tr></table></figure></p><p>删除视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> t;</span><br></pre></td></tr></table></figure></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>数据库中的索引是某个表中一列或多列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。<br>创建唯一性：不允许两行具有相同的索引值（创建了唯一约束，系统将自动创建唯一索引）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure></p><p>创建普通索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column_name);</span><br></pre></td></tr></table></figure></p><p>删除索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br></pre></td></tr></table></figure></p><p>主键索引：主键索引要求主键中的每个值是唯一的，（创建主键自动创建主键索引）<br>聚集索引(CLUSTERED)&lt;查询速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序相同，表中只能包含一个聚集索引，主键列默认为聚集索引<br>非聚集索引(NONCLUSTERED)&lt;更新速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序不匹配，表中可以有249个非聚集索引</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>序列是一数据库对象，利用它可生成唯一的整数。一般使用序列自动地生成主码值。一个序列的值是由特别的Oracle程序自动生成。</p><p>创建序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> sequence_name</span><br><span class="line"><span class="keyword">minvalue</span> <span class="number">1</span> </span><br><span class="line">maxvalue <span class="number">9999999</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>  </span><br><span class="line">nocache</span><br><span class="line"><span class="keyword">cycle</span> </span><br><span class="line"><span class="keyword">order</span>;</span><br><span class="line">INCREMENT BY： 指定序列号之间的间隔，该值可为正的或负的整数，但不可为0。序列为升序。忽略该子句时，缺省值为1。</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span>：指定生成的第一个序列号。在升序时，序列可从比最小值大的值开始，缺省值为序列的最小值。对于降序，序列可由比最大值小的值开始，缺省值为序列的最大值。</span><br><span class="line">MAXVALUE：指定序列可生成的最大值。</span><br><span class="line"><span class="keyword">NOMAXVALUE</span>：为升序指定最大值为<span class="number">1027</span>，为降序指定最大值为<span class="number">-1</span>。</span><br><span class="line"><span class="keyword">MINVALUE</span>：指定序列的最小值。</span><br><span class="line"><span class="keyword">NOMINVALUE</span>：为升序指定最小值为<span class="number">1</span>。为降序指定最小值为<span class="number">-1026</span>。</span><br><span class="line"><span class="keyword">CYCLE</span>: 循环使用，到达最大值或者最小值时，从新建立对象</span><br><span class="line"><span class="keyword">CACHE</span> X: 制定存入缓存（也就是内存）序列值的个数</span><br></pre></td></tr></table></figure></p><p>删除序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> sequence_name;</span><br></pre></td></tr></table></figure></p><p>修改序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">sequence</span> sequence_name <span class="keyword">cycle</span>;</span><br></pre></td></tr></table></figure></p><p>查询序列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">nextval</span> <span class="keyword">for</span> FYCK <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">from</span> ywty_xtywzt;</span><br></pre></td></tr></table></figure></p><h3 id="基本表操作"><a href="#基本表操作" class="headerlink" title="基本表操作"></a>基本表操作</h3><p>删除表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table1;</span><br></pre></td></tr></table></figure></p><p>插入表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(<span class="keyword">id</span>,qssi) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure></p><p>删除表数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> table1 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>更新表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> qssi=<span class="string">'2'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>修改字段长度<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi varchar2(<span class="number">21</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">varchar</span>(<span class="number">22</span>);</span><br></pre></td></tr></table></figure></p><p>更改字段类型<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span>(qssi <span class="built_in">integer</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);只可以加宽，不能更改类型</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">integer</span>;</span><br></pre></td></tr></table></figure></p><p>增加列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">add</span> mail <span class="built_in">varchar</span>(<span class="number">128</span>);</span><br></pre></td></tr></table></figure></p><p>删除列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> <span class="keyword">column</span> mail;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供删除列功能（解决办法是删除表，重建）</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> mail;</span><br></pre></td></tr></table></figure></p><p>更改列名<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">rename</span> <span class="keyword">column</span> mail <span class="keyword">to</span> mail2;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供更改列名功能（解决办法同删除，或者通过建立一个新视图解决）</span><br></pre></td></tr></table></figure></p><p>更改列的限制（主键、非空）<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="literal">null</span>/<span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> <span class="keyword">column</span> qssi <span class="keyword">drop</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="built_in">varchar</span> <span class="literal">null</span>/noy <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>取前N条记录<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> <span class="keyword">rownum</span> &lt;=n ;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">fetch</span> <span class="keyword">first</span> n <span class="keyword">rows</span> <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">first</span> n * <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>取当前日期<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">timestamp</span> <span class="keyword">from</span> sysibm.sysdummy1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">from</span> sysmaster:sysshmvals;</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>空值转换<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nvl(ajsm,<span class="number">0</span>) <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">value</span>(ajsm,<span class="string">''</span>)  <span class="keyword">FROM</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  nvl(by1,<span class="number">0</span>) <span class="keyword">FROM</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><p>取值判断<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> ywsqbh <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><h2 id="sql后台执行命令"><a href="#sql后台执行命令" class="headerlink" title="sql后台执行命令"></a>sql后台执行命令</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus gapsdb/gapsdb@ora11g</span><br><span class="line">@test.sql</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2 connect to agent21t user dba using HDb2@M01</span><br><span class="line">db2 –tvf 文件名 –z 执行日志文件</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbaccess y4tinf epcc.sql</span><br></pre></td></tr></table></figure></p><h3 id="数据库启停"><a href="#数据库启停" class="headerlink" title="数据库启停"></a>数据库启停</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：conn /as sysdba</span><br><span class="line">启动：startup</span><br><span class="line">停止：shutdown</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：db2 connect to test</span><br><span class="line">启动：db2start</span><br><span class="line">停止：db2stop</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动：oninit –vy</span><br><span class="line">停止：onmode –ky</span><br></pre></td></tr></table></figure></p><h2 id="sql共享原理"><a href="#sql共享原理" class="headerlink" title="sql共享原理"></a>sql共享原理</h2><p>ORACLE将执行过的SQL语句存放在内存的共享池(shared buffer pool)中，可以被所有的数据库用户共享。<br>当你执行一个SQL语句(有时被称为一个游标)时,如果它和之前的执行过的语句完全相同,ORACLE就能很快获得已经被解析的语句以及最好的执行路径. 这个功能大大地提高了SQL的执行性能并节省了内存的使用。<br>可惜的是，Oracle只对简单的表提供高速缓冲(cache bufferiIl，这个功能并不适用于多表连接查询。数据库管理员必须在启动参数文件中为这个区域设置合适的参数，当这个内存区域越大，就可以保留更多的语句，当然被共享的可能性也就越大了。当向Oracle提交一个SQL语句时，Oracle会首先在这块内存中查找相同的语句。<br>Oracle对两者采取的是一种严格匹配策略，要达成共享。SQL语句必须完全相同(包括空格、换行等)。<br>能够使用共享的语句必须满足三个条件：<br>1）字符级的比较。<br>当前被执行的语句和共享池中的语句必须完全相同。<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ATABLE；和下面每一个<span class="keyword">SQL</span>语句都不同：</span><br><span class="line"><span class="keyword">SELECT</span>  *<span class="keyword">from</span> ATABLE</span><br><span class="line"><span class="keyword">Select</span>  * <span class="keyword">From</span> Atable；</span><br></pre></td></tr></table></figure><p>2）语句所指对象必须完全相同 即两条SQL语句操作的数据库对象必须同一。<br>3）语句中必须使用相同命名的绑定变量。如：第一组的两个SQL语句是相同的，可以共享；而第二组中两个语句不同，即使在运行时赋予不同的绑定变量以相同的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =  ：blk1.pin；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.pin；</span><br><span class="line">第二组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.ot_jnd；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin = ：blk1.ov_jnd；</span><br></pre></td></tr></table></figure><p>当一个Oracle实例接收一条sql后的顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> a <span class="keyword">Cursor</span> 创建游标</span><br><span class="line"><span class="keyword">Parse</span> the <span class="keyword">Statement</span> 分析语句</span><br><span class="line"><span class="keyword">Describe</span> Results <span class="keyword">of</span> a <span class="keyword">Query</span> 描述查询的结果集</span><br><span class="line"><span class="keyword">Define</span> <span class="keyword">Output</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 定义查询的输出数据</span><br><span class="line">Bind <span class="keyword">Any</span> <span class="keyword">Variables</span> 绑定变量</span><br><span class="line">Parallelize the <span class="keyword">Statement</span> 并行执行语句</span><br><span class="line">Run the <span class="keyword">Statement</span> 运行语句</span><br><span class="line"><span class="keyword">Fetch</span> <span class="keyword">Rows</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 取查询出来的行</span><br><span class="line"><span class="keyword">Close</span> the <span class="keyword">Cursor</span> 关闭游标</span><br></pre></td></tr></table></figure><h2 id="重编译问题"><a href="#重编译问题" class="headerlink" title="重编译问题"></a>重编译问题</h2><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dConMsg <span class="keyword">where</span> contract_no = <span class="number">32013484095139</span></span><br></pre></td></tr></table></figure><p>这个语句每执行一次就需要在SHARE POOL 硬解析一次，一百万用户就是一百万次，消耗CPU和内存，如果业务量大，很可能导致宕库……<br>如果绑定变量，则只需要硬解析一次，重复调用即可</p><h3 id="绑定变量解决重新编译问题"><a href="#绑定变量解决重新编译问题" class="headerlink" title="绑定变量解决重新编译问题"></a>绑定变量解决重新编译问题</h3><p>未使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sprintf(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> scott.test1 (num1, num2) <span class="keyword">values</span> </span><br><span class="line"> (%d,%d)<span class="string">",n_var1, n_var2);</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE IMMEDIATE :sqlstr ;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><p>使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strcpy(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> (num1, num2) <span class="keyword">values</span> (:v1, :v2)<span class="string">");</span></span><br><span class="line"><span class="string">EXEC SQL PREPARE sql_stmt FROM :sqlstr;</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE sql_stmt USING :n_var1, :n_var2;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><h2 id="sql语句的处理过程"><a href="#sql语句的处理过程" class="headerlink" title="sql语句的处理过程"></a>sql语句的处理过程</h2><h3 id="解析-PARSE"><a href="#解析-PARSE" class="headerlink" title="解析(PARSE)"></a>解析(PARSE)</h3><pre><code>在共享池中查找SQL语句检查语法检查语义和相关的权限合并(MERGE)视图定义和子查询确定执行计划</code></pre><h3 id="绑定-BIND"><a href="#绑定-BIND" class="headerlink" title="绑定(BIND)"></a>绑定(BIND)</h3><pre><code>在语句中查找绑定变量赋值(或重新赋值)</code></pre><h3 id="执行-EXECUTE"><a href="#执行-EXECUTE" class="headerlink" title="执行(EXECUTE)"></a>执行(EXECUTE)</h3><pre><code>应用执行计划执行必要的I/O和排序操作</code></pre><h3 id="提取-FETCH"><a href="#提取-FETCH" class="headerlink" title="提取(FETCH)"></a>提取(FETCH)</h3><pre><code>从查询结果中返回记录必要时进行排序</code></pre><h2 id="sql优化的一般性原则"><a href="#sql优化的一般性原则" class="headerlink" title="sql优化的一般性原则"></a>sql优化的一般性原则</h2><p>目标：<br>    减少服务器资源消耗（主要是磁盘IO）.<br>设计方面：<br>    尽量依赖oracle的优化器，并为其提供条件；<br>    合适的索引.<br>编码方面：<br>    利用索引，避免大表FULL TABLE SCAN；<br>    避免写过于复杂的sql，不一定非要一个sql解决问题；<br>    在不影响业务的前提下减小事务的粒度.</p><h3 id="优化概括"><a href="#优化概括" class="headerlink" title="优化概括"></a>优化概括</h3><p>创建表的时候。应尽量建立主键，大数据表删除，用truncate table代替delete。<br>合理使用索引，在OLTP（数仓）应用中一张表的索引不要太多。组合索引的列顺序尽量与查询条件列顺序保持一致。<br>查询尽量用确定的列名，少用<em>号。select count(key)from tab where key&gt; 0性能优于select count(</em>)from tab；<br>尽量少嵌套子查询，这种查询会消耗大量的CPU资源；对于有比较多or运算的查询，建议分成多个查询，用union all联结起来；多表查询的查询语句中，选择最有效率的表名顺序。Oracle解析器对表解析从右到左，所以记录少的表放在右边。<br>尽量多用commit语句提交事务，可以及时释放资源、解锁、释放日志空间、减少管理花费。</p><h3 id="用UNION-ALL-替换UNION"><a href="#用UNION-ALL-替换UNION" class="headerlink" title="用UNION-ALL 替换UNION"></a>用UNION-ALL 替换UNION</h3><p>当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><h3 id="避免在索引列上使用函数"><a href="#避免在索引列上使用函数" class="headerlink" title="避免在索引列上使用函数"></a>避免在索引列上使用函数</h3><p>WHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL * <span class="number">12</span> &gt; <span class="number">25000</span>;</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL  &gt; <span class="number">25000</span>/<span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="避免使用前置通配符"><a href="#避免使用前置通配符" class="headerlink" title="避免使用前置通配符"></a>避免使用前置通配符</h3><p>WHERE子句中, 如果索引列所对应的值的第一个字符由通配符(WILDCARD)开始, 索引将不被采用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER_NO,USER_NAME,ADDRESS <span class="keyword">FROM</span> USER_FILES <span class="keyword">WHERE</span> USER_NO <span class="keyword">LIKE</span> <span class="string">'%109204421'</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，ORACLE将使用全表扫描</p><h3 id="避免在索引列上使用NOT"><a href="#避免在索引列上使用NOT" class="headerlink" title="避免在索引列上使用NOT"></a>避免在索引列上使用NOT</h3><p>通常，我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE遇到NOT,他就会停止使用索引转而执行全表扫描.<br>低效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE ! = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>高效: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="用NOT-EXISTS-替代-NOT-IN"><a href="#用NOT-EXISTS-替代-NOT-IN" class="headerlink" title="用NOT EXISTS 替代 NOT IN"></a>用NOT EXISTS 替代 NOT IN</h3><p>在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历).<br>使用NOT EXISTS 子句可以有效地利用索引。尽可能使用NOT EXISTS来代替NOT IN，尽管二者都使用了NOT（不能使用索引而降低速度），NOT EXISTS要比NOT IN查询效率更高。<br>语句1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><p>语句2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept.deptno = emp.deptno);</span><br></pre></td></tr></table></figure><p>语句2比语句1的执行性能好很多</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。&lt;br&gt;事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库,SQL" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL/"/>
    
  </entry>
  
  <entry>
    <title>Makefile学习</title>
    <link href="http://yoursite.com/2018/07/31/Makefile%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/31/Makefile学习/</id>
    <published>2018-07-31T06:29:00.000Z</published>
    <updated>2018-08-01T02:47:14.534Z</updated>
    
    <content type="html"><![CDATA[<p>本文借鉴于<br><a href="https://www.cnblogs.com/mfryf/p/3305778.html" target="_blank" rel="noopener">陈皓 (CSDN) 跟我一起写 Makefile</a><br>makefile<br>在Makefile中的命令，必须以[tab]键开始</p><p>Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。<br>Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。</p><p>本博客中默认的编译器是Unix下的GCC和CC<br><a id="more"></a></p><h2 id="关于程序的链接和编译"><a href="#关于程序的链接和编译" class="headerlink" title="关于程序的链接和编译"></a>关于程序的链接和编译</h2><p>一般来说，无论是C还是C++，首先要把源文件编译成中间代码文件，在windows下是.obj文件，Unix下是.o文件，即Object File，这个动作叫做编译。然后再把大量的Object File合成执行文件，这个动作叫做链接（Link）。<br>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。<br>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（LibraryFile)，也就是 .lib文件，在UNIX下，是Archive File，也就是 .a文件。<br>也就是说，源代码首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p><h2 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h2><p>make命令执行时，需要一个 Makefile文件，以告诉make命令需要怎么样的去编译和链接程序。make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重新编译，从而自己编译所需要的文件和连接目标程序</p><h3 id="makefile的规则"><a href="#makefile的规则" class="headerlink" title="makefile的规则"></a>makefile的规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target...:prerequisites...(预备知识，先决条件)</span></span><br><span class="line">command(指令)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label）。<br>prerequisites就是，要生成那个target所需要的文件或是目标<br>command就是make需要执行的命令。（任意的shell命令）<br>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如果一个工程有3个头文件，和8个C文件，为了完成规则：<br>1.如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。<br>2.如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。<br>3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序<br>我们的Makefile文件应该是这样的：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">       cc-c main.c</span><br><span class="line">kbd.o : kbd.c defs.hcommand.h</span><br><span class="line">       cc-c kbd.c</span><br><span class="line">command.o : command.cdefs.h command.h</span><br><span class="line">       cc-c command.c</span><br><span class="line">display.o : display.cdefs.h buffer.h</span><br><span class="line">       cc-c display.c</span><br><span class="line">insert.o : insert.cdefs.h buffer.h</span><br><span class="line">       cc-c insert.c</span><br><span class="line">search.o : search.cdefs.h buffer.h</span><br><span class="line">       cc-c search.c</span><br><span class="line">files.o : files.c defs.hbuffer.h command.h</span><br><span class="line">       cc-c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">       cc-c utils.c</span><br><span class="line">clean :</span><br><span class="line">       rmedit main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。<br>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个Tab键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。<br>clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h3 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="make是如何工作的"></a>make是如何工作的</h3><p>在默认的方式下，也就是我们只输入make命令。那么，<br>1.make会在当前目录下找名字叫“Makefile”或“makefile”的文件<br>2.如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件<br>3.如果edit文件不存在，或是edit所依赖的后面的.o文件的文件修改时间要比edit这个文件新，那么，它就会执行后面所定义的命令来生成edit这个文件<br>4.如果edit所依赖的.o文件也存在，那么make会在当前文件中目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件<br>5.当然了，你的C文件和H文件是存在的，于是make会生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit了</p><p>这就是整个make的依赖性，make会一层一层去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性。</p><p>通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——“make clean”，以此来清除所有的目标文件，以便重编译</p><p>于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。</p><h3 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h3><p>上面的例子中 edit的规则为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br></pre></td></tr></table></figure><p> 我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。</p><p> 所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。比如，我们声明一个变量，叫objects,OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects = main.okbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>于是，我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.osearch.o files.o utils.o </span><br><span class="line"></span><br><span class="line">   edit: $(objects)</span><br><span class="line"></span><br><span class="line">           cc-o edit $(objects)</span><br><span class="line"></span><br><span class="line">   main.o: main.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c main.c</span><br><span class="line"></span><br><span class="line">   kbd.o: kbd.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c kbd.c</span><br><span class="line"></span><br><span class="line">   command.o: command.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c command.c</span><br><span class="line"></span><br><span class="line">   display.o: display.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c display.c</span><br><span class="line"></span><br><span class="line">   insert.o: insert.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c insert.c</span><br><span class="line"></span><br><span class="line">   search.o: search.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c search.c</span><br><span class="line"></span><br><span class="line">   files.o: files.c defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c files.c</span><br><span class="line"></span><br><span class="line">   utils.o: utils.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c utils.c</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit $(objects)</span><br></pre></td></tr></table></figure><p>所以如果以后有新的.o文件加入，我们只需要修改一下objects变量就可以了</p><h3 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="让make自动推导"></a>让make自动推导</h3><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">  edit :<span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">   main.o: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   command.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   display.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   insert.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   search.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   files.o: defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">   utils.o: defs.h</span><br><span class="line"></span><br><span class="line">    .PHONY: clean</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。</p><h3 id="另类风格的makefile"><a href="#另类风格的makefile" class="headerlink" title="另类风格的makefile"></a>另类风格的makefile</h3><p>即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o  insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">    edit: <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$(objects)</span>: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.ocommand.o files.o : command.h</span><br><span class="line"></span><br><span class="line">   display.oinsert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">    .PHONY : clean  //“.PHONY”表示，clean是个伪目标文件</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h3 id="清空目标文件的规则"><a href="#清空目标文件的规则" class="headerlink" title="清空目标文件的规则"></a>清空目标文件的规则</h3><p>每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">      clean:</span><br><span class="line">              -rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>.PHONY意思表示clean是一个“伪目标”。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p><h2 id="makefile综述"><a href="#makefile综述" class="headerlink" title="makefile综述"></a>makefile综述</h2><h3 id="makefile里有什么？"><a href="#makefile里有什么？" class="headerlink" title="makefile里有什么？"></a>makefile里有什么？</h3><p>Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li>显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。</li><li>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。</li><li>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</li><li>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。</li><li>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“#”。</li></ol><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文借鉴于&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/mfryf/p/3305778.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;陈皓 (CSDN) 跟我一起写 Makefile&lt;/a&gt;&lt;br&gt;makefile&lt;br&gt;在Makefile中的命令，必须以[tab]键开始&lt;/p&gt;
&lt;p&gt;Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。&lt;br&gt;Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。&lt;/p&gt;
&lt;p&gt;本博客中默认的编译器是Unix下的GCC和CC&lt;br&gt;
    
    </summary>
    
    
      <category term="Makefile，Unix" scheme="http://yoursite.com/tags/Makefile%EF%BC%8CUnix/"/>
    
  </entry>
  
  <entry>
    <title>C语言数组和指针</title>
    <link href="http://yoursite.com/2018/07/31/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2018/07/31/C语言数组和指针/</id>
    <published>2018-07-31T00:54:25.000Z</published>
    <updated>2018-07-31T03:56:05.296Z</updated>
    
    <content type="html"><![CDATA[<p>1.const 关键字声明后数据不能修改<br>2.sizeof 数组名指的是整个数组的大小（以字节为单位）<br>  sizeof 数组名[0]指的是数组中一个元素的大小<br>  整个数组的大小除以单个元素的大小就是数组元素的个数<br>3.初始化器的重要性<br>  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素<br>  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化<br>4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值<br>  <a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> oxen[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">/*初始化没问题,不足的参数设置为0*/</span></span><br><span class="line">  <span class="keyword">int</span> yaks[SIZE];</span><br><span class="line">  yaks = oxen; <span class="comment">/*不允许*/</span></span><br><span class="line">  yaks[SIZE] = oxen[SIZE];<span class="comment">/*数组下标越界*/</span></span><br><span class="line">  yaks[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">/*不起作用*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.数组边界<br>  在C标准中，使用越界下标的结果是未定义的<br>  使用越界的数组下标可能会导致程序改变其他变量的值。不同的编译器运行同一个程序的结果可能不同，有些会导致程序异常中止。<br>  要注意数组的边界</p><p>6.指针和数组<br>  short类型占两个字节、double类型占八个字节<br>  在C中，指针加一指的是增加一个存储单元，对数组而言，这意味着加一后得到地址是下一个元素的地址，而不是下一个字节的地址，所以必须声明指针所指向对象的类型<br>  系统中地址是按字节编码的<br>7.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;<span class="comment">//一元运算符*和++的优先级相同,但结合律是从右往左</span></span><br></pre></td></tr></table></figure></p><p>  即表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)*start++=*(start++) =&gt;m=start;*m;start++(先把指针指向位置上值取出，然后再递增指针)</span><br><span class="line"><span class="number">2</span>)total = total+*m;</span><br></pre></td></tr></table></figure><p>8.<code>int * p = &amp; a;</code><br>  p是指向a的指针，p中存的是a的地址<br>  &amp;p是指向指针p的指针，&amp;p中存的是指针p的地址<br>9.创建一个指针时，系统只分配了储存指针本身的内存，并未分配存储数据的内存，因此，在使用指针之前，必须先用已分配的地址初始化它。<br>10.const 指针是指不能用指针来改变它所指向的值，但是可以让指针指向别处<br>11.<br>1）把const数据或非const数据的地址初始化为指向const的指针或为其赋值是合法的</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">const double *pc = rate; <span class="comment">//有效</span></span><br><span class="line">pc = locked;<span class="comment">//有效</span></span><br><span class="line">pc = &amp;locked[<span class="number">3</span>] ;<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>2）只能把非const数据的地址赋给普通指针</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">double *pp = rate;<span class="comment">//有效</span></span><br><span class="line">pp = locked;<span class="comment">//无效&lt;因为如果成立的话就可以用指针改变locked的值了&gt;</span></span><br><span class="line">pp = &amp;rate[<span class="number">3</span>];<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>12.<code>double * const pc = &amp;rate;//可以初始化一个不能指向别处的指针</code><br>13.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">int</span> (* p)<span class="selector-attr">[2]</span>;<span class="comment">//p指向一个内含两个int类型值的数组</span></span><br><span class="line"><span class="selector-tag">int</span> * <span class="selector-tag">p</span><span class="selector-attr">[2]</span>;<span class="comment">//p是一个内含两个指针元素的数组，每个元素都指向int 的指针</span></span><br></pre></td></tr></table></figure><p>14.指针的兼容性<br>   指针之间的赋值比数值类型之间的赋值要严格<br>   假如有如下声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br><span class="line"><span class="keyword">int</span> (*pa)[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ar1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> **p2;<span class="comment">//一个指向指针的指针</span></span><br></pre></td></tr></table></figure><p>   有如下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt = &amp;ar1[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1;<span class="comment">//无效</span></span><br><span class="line">pa = ar1;<span class="comment">//都是指向内含3个int类型元素的数组的指针</span></span><br><span class="line">pa = ar2;<span class="comment">//无效</span></span><br><span class="line">p2 = &amp;pt;<span class="comment">//both point-to-int *</span></span><br><span class="line">*p2 = ar2[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">p2 = ar2;<span class="comment">//无效</span></span><br></pre></td></tr></table></figure><p>15.把const指针赋给非const指针不安全，因为这样可以使用新的指针改变const指针指向的数据<br>   但是把非const指针赋给const指针没问题，前提是只进行一级解引用<br>16.编译器会把数组表示法转换成指针表示法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar[<span class="number">1</span>] -&gt; ar+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ar[][length] -&gt;表示ar指向一个内含length个<span class="keyword">int</span>类型值的数组</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> ar[<span class="number">3</span>][<span class="number">4</span>],<span class="keyword">int</span> rows)</span></span>;<span class="comment">//有效声明，但是3会被忽略</span></span><br></pre></td></tr></table></figure><ol start="17"><li>在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.const 关键字声明后数据不能修改&lt;br&gt;2.sizeof 数组名指的是整个数组的大小（以字节为单位）&lt;br&gt;  sizeof 数组名[0]指的是数组中一个元素的大小&lt;br&gt;  整个数组的大小除以单个元素的大小就是数组元素的个数&lt;br&gt;3.初始化器的重要性&lt;br&gt;  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素&lt;br&gt;  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化&lt;br&gt;4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值&lt;br&gt;
    
    </summary>
    
    
      <category term="C语言学习" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/30/hello-world/"/>
    <id>http://yoursite.com/2018/07/30/hello-world/</id>
    <published>2018-07-30T09:28:02.453Z</published>
    <updated>2018-07-31T02:17:30.989Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
