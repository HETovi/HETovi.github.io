<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tovi的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-16T03:26:29.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tovi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell</title>
    <link href="http://yoursite.com/2018/08/16/Shell/"/>
    <id>http://yoursite.com/2018/08/16/Shell/</id>
    <published>2018-08-16T01:53:17.000Z</published>
    <updated>2018-08-16T03:26:29.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell编程概述"><a href="#Shell编程概述" class="headerlink" title="Shell编程概述"></a>Shell编程概述</h1><h2 id="Shell简介"><a href="#Shell简介" class="headerlink" title="Shell简介"></a>Shell简介</h2><h3 id="Shell是什么"><a href="#Shell是什么" class="headerlink" title="Shell是什么"></a>Shell是什么</h3><p>在计算机语言中，shell是指一种命令行解释器，是为用户和操作系统之间通信提供的一种接口，它接受来自用户输入的命令，并将其转化为一系列的系统调用送到内核执行，并将结果输出给用户。<br>shell分成两大类：一类是图形界面shell（Graphical User Interface），另一种是命令行式shell（Command Line Interface）。<br>shell还是一种解释型语言，这种语言经过编写后不需要做任何编译就可以运行。</p><a id="more"></a><h3 id="shell的功能"><a href="#shell的功能" class="headerlink" title="shell的功能"></a>shell的功能</h3><p>当一台系统运行起来时，内核会被调入内存中运行，由内核执行所有底层的工作，它会将所有应用程序及用户的操作翻译成CPU的基本指令，并将其送至处理器。<br>shell是为了对用户屏蔽这些复杂的技术细节，同时也是为了保护内核不会因用户直接操作而受到损害。</p><h2 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h2><h3 id="helloworld-sh"><a href="#helloworld-sh" class="headerlink" title="helloworld.sh"></a>helloworld.sh</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span>一个shell脚本永远以"#!"开头，这是一个脚本开始的标记，告诉操作系统执行这个文件需要使用某个解释器</span><br><span class="line"><span class="meta">#</span>/bin/bash指明了解释器的具体位置</span><br><span class="line"><span class="meta">#</span>脚本中所有以#开头的都是注解（当然以"#!"开头的除外）</span><br><span class="line">echo "hello world"</span><br></pre></td></tr></table></figure><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><h4 id="在该脚本所在的目录中直接bash这个脚本"><a href="#在该脚本所在的目录中直接bash这个脚本" class="headerlink" title="在该脚本所在的目录中直接bash这个脚本"></a>在该脚本所在的目录中直接bash这个脚本</h4><p>//bash 一个文件指定了使用Bash shell 来解释脚本内容，所以这里不需要#!/bin/bash 了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash helloworld.sh</span><br></pre></td></tr></table></figure><h4 id="给该脚本加上可执行权限"><a href="#给该脚本加上可执行权限" class="headerlink" title="给该脚本加上可执行权限"></a>给该脚本加上可执行权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x helloworld.sh</span><br><span class="line">./helloworld.sh</span><br></pre></td></tr></table></figure><h2 id="shell的内建命令"><a href="#shell的内建命令" class="headerlink" title="shell的内建命令"></a>shell的内建命令</h2><p>shell内建命令就是由Bash自身提供的命令，而不是文件系统中的某个可执行文件。<br>通常来说，内建命令会比外部命令执行得更快，执行外部命令不但会触发磁盘I/O，还需要fork出一个单独的进程来执行，执行完成再退出。<br>执行内建命令相当于调用当前shell进程的一个函数。</p><h3 id="如何确定内建命令：type"><a href="#如何确定内建命令：type" class="headerlink" title="如何确定内建命令：type"></a>如何确定内建命令：type</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> 命令名</span><br></pre></td></tr></table></figure><h3 id="执行程序：”-”（点号）"><a href="#执行程序：”-”（点号）" class="headerlink" title="执行程序：”.”（点号）"></a>执行程序：”.”（点号）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//没有执行权限的脚本使用点号执行能正常运行</span><br><span class="line">. ./helloworld.sh</span><br><span class="line">//<span class="built_in">source</span> 命令也可读取并在当前环境中执行脚本，同时返回脚本中最后一个命令的返回状态</span><br><span class="line">//如果没有返回值则返回0，代表执行成功;如果未找到指定的脚本则返回<span class="literal">false</span></span><br><span class="line"><span class="built_in">source</span> helloworld.sh</span><br></pre></td></tr></table></figure><h3 id="别名-alias"><a href="#别名-alias" class="headerlink" title="别名:alias"></a>别名:alias</h3><p>使用alias可以自定义别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自定义关机别名</span><br><span class="line"><span class="built_in">alias</span> myshutdown=<span class="string">'shutdown -h now'</span></span><br></pre></td></tr></table></figure><p>但是这样定义的alias只能在当前shell环境有效，要确保永远生效需要将该条目写到用户家目录中的.bashrc文件中<br>需要source ~/.bashrc生效</p><h3 id="删除别名：unalias"><a href="#删除别名：unalias" class="headerlink" title="删除别名：unalias"></a>删除别名：unalias</h3><p>删除当前shell环境中的别名，并在当前shell环境中生效</p><h3 id="任务前后台切换：bg、fg、jobs"><a href="#任务前后台切换：bg、fg、jobs" class="headerlink" title="任务前后台切换：bg、fg、jobs"></a>任务前后台切换：bg、fg、jobs</h3><p>该命令用于将任务（比较耗时的任务）放置后台运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//如果预支某个任务耗时很久，可以一开始就将该命令放入后台运行</span><br><span class="line">某任务 &amp;</span><br><span class="line">tar -zcf usr.tgz /usr &amp;</span><br><span class="line">//将任务放入后台运行</span><br><span class="line"><span class="built_in">bg</span> 任务编号</span><br><span class="line">//将任务调至前台运行</span><br><span class="line"><span class="built_in">fg</span> 任务编号</span><br></pre></td></tr></table></figure><h3 id="声明变量：declare、typeset"><a href="#声明变量：declare、typeset" class="headerlink" title="声明变量：declare、typeset"></a>声明变量：declare、typeset</h3><p>shell弱化了变量的类概念，声明变量时并不需要指明类型，若使用declare可以用-i参数声明整型变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//声明变量i_num01，其值为1</span><br><span class="line">i_num01=1</span><br><span class="line">//使用<span class="built_in">declare</span> 声明整型变量i_num02</span><br><span class="line"><span class="built_in">declare</span> -i i_num02=1</span><br><span class="line">// -r 声明变量为只读</span><br><span class="line"><span class="built_in">declare</span> -r <span class="built_in">readonly</span>=100</span><br><span class="line">// -a 声明变量</span><br><span class="line"><span class="built_in">declare</span> -a arr=<span class="string">'([0]="a" [1]="b" [2]="c")'</span></span><br><span class="line">//使用 -F、-f显示脚本中定义的函数和函数体</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">func_1()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"F1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func_2()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"F2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"declare -F"</span></span><br><span class="line"><span class="built_in">declare</span> -F</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"declare -f"</span></span><br><span class="line"><span class="built_in">declare</span> -f</span><br><span class="line"></span><br><span class="line">输出为：</span><br><span class="line"><span class="built_in">declare</span> -F</span><br><span class="line"><span class="built_in">declare</span> -f func_1</span><br><span class="line"><span class="built_in">declare</span> -f func_2</span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -f</span><br><span class="line">func_1 () </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"F1"</span></span><br><span class="line">&#125;</span><br><span class="line">func_2 () </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"F2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印字符；echo"><a href="#打印字符；echo" class="headerlink" title="打印字符；echo"></a>打印字符；echo</h3><p>该命令会打印出引号中的内容，并在最后默认加上换行符。<br>使用-n可以不打印换行符。<br>使用-e允许打印转义字符。</p><h3 id="跳出循环：break"><a href="#跳出循环：break" class="headerlink" title="跳出循环：break"></a>跳出循环：break</h3><p>break后可以跟一个数字n，代表跳出n层循环，如果n比当前循环层数还要大，则跳出所有循环。</p><h3 id="循环控制：continue"><a href="#循环控制：continue" class="headerlink" title="循环控制：continue"></a>循环控制：continue</h3><p>停止当前循环，并执行外层循环的下一次循环。<br>continue后可以加上一个数字n，代表跳至外部第n层循环，如果n比当前循环层数还要大，将跳至最外层循环。</p><h3 id="将所跟参数作为shell的输入，并执行产生的命令：eval"><a href="#将所跟参数作为shell的输入，并执行产生的命令：eval" class="headerlink" title="将所跟参数作为shell的输入，并执行产生的命令：eval"></a>将所跟参数作为shell的输入，并执行产生的命令：eval</h3><h4 id="用例一"><a href="#用例一" class="headerlink" title="用例一"></a>用例一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将字符串解析成命令执行</span><br><span class="line">cmd=<span class="string">"ls -l /etc/passwd"</span></span><br><span class="line">//使用<span class="built_in">eval</span>将之前的字符串解析为命令并执行</span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$cmd</span></span><br></pre></td></tr></table></figure><h4 id="用例二"><a href="#用例二" class="headerlink" title="用例二"></a>用例二</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//程序运行中根据某个变量确定实际的变量名</span><br><span class="line">name1=john</span><br><span class="line">name2=wang</span><br><span class="line">num=1</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">"$"</span>name<span class="variable">$num</span></span><br></pre></td></tr></table></figure><h4 id="将某个变量的值当做另一个变量名并给其赋值"><a href="#将某个变量的值当做另一个变量名并给其赋值" class="headerlink" title="将某个变量的值当做另一个变量名并给其赋值"></a>将某个变量的值当做另一个变量名并给其赋值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name1=john</span><br><span class="line">name2=wang</span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$name1</span>=<span class="string">"<span class="variable">$name2</span>"</span>  <span class="comment">#等价于 john="wang"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$john</span></span><br><span class="line">输出 wang</span><br></pre></td></tr></table></figure><h3 id="执行命令来取代当前的Shell：exec"><a href="#执行命令来取代当前的Shell：exec" class="headerlink" title="执行命令来取代当前的Shell：exec"></a>执行命令来取代当前的Shell：exec</h3><p>内建命令exec并不启动新的shell，而是用要被执行的命令替换当前的shell进程，并且将老进程的环境清理掉，而且exec命令后的其他命令将不再执行。<br>为避免出现这种情况，一般讲exec命令放到一个shell脚本中，由主脚本调用这个脚本，主脚本在调用子脚本执行时，当执行到exec后，该字脚本进程就被替换成相应的exec命令。<br>注意source命令或者点号，不会为脚本新建shell，而只是将脚本包含的命令在当前shell执行。</p><h3 id="退出shell：exit"><a href="#退出shell：exit" class="headerlink" title="退出shell：exit"></a>退出shell：exit</h3><p>在当前shell中直接运行该命令的后果是退出本次登录。<br>在shell脚本中使用exit代表退出当前脚本。</p><h3 id="使变量能被子shell识别：export"><a href="#使变量能被子shell识别：export" class="headerlink" title="使变量能被子shell识别：export"></a>使变量能被子shell识别：export</h3><p>用户登录到系统后，系统将启动一个shell，用户可以在该shell中声明变量，也可以创建并运行shell脚本。<br>如果说登录时的shell是父shell，则在该shell中运行的shell是该shell的子shell。<br>当子shell运行完毕后，将返回执行该脚本的父shell。<br>用户可以有许多shell，每个shell都是由父shell创建的。<br>//使子shell可以读取在父shell中声明的变量<br>//但这只是值的传递，如果在子shell中尝试修改该值，父shell中的值是不会变的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> var=100</span><br></pre></td></tr></table></figure><h3 id="发送信号给指定PID或进程：kill"><a href="#发送信号给指定PID或进程：kill" class="headerlink" title="发送信号给指定PID或进程：kill"></a>发送信号给指定PID或进程：kill</h3><p>Linux包括三种不同类型的进程<br>交互进程：由一个shell启动的进程，既可以在前台运行，也可以在后台运行。<br>批处理进程：与终端没有联系，是一个进程序列<br>监控进程（系统守护进程）：在系统启动时启动，并保持在后台运行。<br>kill的工作原理是向系统的内核发送一个系统操作信号和某个进程的进程标志号，然后系统内核就可以对进程标志号指定的进程进行操作。</p><h3 id="整数运算：let"><a href="#整数运算：let" class="headerlink" title="整数运算：let"></a>整数运算：let</h3><p>let是shell内建的整数运算命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> I=5+5  ---&gt;I=10</span><br></pre></td></tr></table></figure><h3 id="显示当前工作目录：pwd"><a href="#显示当前工作目录：pwd" class="headerlink" title="显示当前工作目录：pwd"></a>显示当前工作目录：pwd</h3><p>-P参数，打印出的路径不会包含符号连接<br>-L参数，打印出的路径可以包含符号连接</p><h3 id="声明局部变量"><a href="#声明局部变量" class="headerlink" title="声明局部变量"></a>声明局部变量</h3><p>用于在脚本中声明局部变量<br>典型的用法是用于函数体内，其作用域也在声明该变量的函数体。<br>如果试图在函数外使用local声明变量，会报错。</p><h3 id="从标准输入读取一行到变量：read"><a href="#从标准输入读取一行到变量：read" class="headerlink" title="从标准输入读取一行到变量：read"></a>从标准输入读取一行到变量：read</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"print something:"</span></span><br><span class="line"><span class="built_in">read</span> N </span><br><span class="line">类似于：</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"print something:"</span> N</span><br></pre></td></tr></table></figure><p>//如果不指定变量，read命令会将读取到的值放入环境变量REPLY中。<br>//read是按行读取的，用回车符区分一行，可以输入任意文字，他们都会保存在变量REPLY中。<br>echo $REPLY </p><h3 id="定义函数返回值：return"><a href="#定义函数返回值：return" class="headerlink" title="定义函数返回值：return"></a>定义函数返回值：return</h3><p>使函数以指定值退出。<br>如果没有指定n值，则返回状态是函数体中执行最后一个命令的退出状态。</p><h3 id="向左移动位置参数：shift"><a href="#向左移动位置参数：shift" class="headerlink" title="向左移动位置参数：shift"></a>向左移动位置参数：shift</h3><p>脚本位置参数概念：假设一个脚本在运行时可以接受参数，那么从左到右第一个参数被记做$1，以此类推。<br>所有参数记做$@或$*，参数的总个数记做$#，而脚本本身记做$0.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">until [ -z "$1" ]</span><br><span class="line">do </span><br><span class="line"> echo "$@"</span><br><span class="line"> shift</span><br><span class="line">done</span><br><span class="line">输出为：</span><br><span class="line">A B C</span><br><span class="line">B C </span><br><span class="line">C</span><br></pre></td></tr></table></figure><h3 id="显示并设置进程资源限度：ulimit"><a href="#显示并设置进程资源限度：ulimit" class="headerlink" title="显示并设置进程资源限度：ulimit"></a>显示并设置进程资源限度：ulimit</h3><p>ulimit可以控制进程对可用资源的访问。<br>默认情况下Linux系统的各个资源都做了软硬限制，其中硬限制的作用是控制软限制（软限制不能高于硬限制）。<br>ulimit -a 可以查看当前系统的软限制<br>ulimit -a -H 可查看系统的硬限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//core 文件大小，单位是block，默认为0</span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">//数据段大小，单位是kbyte，默认不做限制</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">//调度优先级，默认为0</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">//创建文件的大小，单位是block，默认不做限制</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">//挂起的信号数量，默认是7270</span><br><span class="line">pending signals                 (-i) 7270</span><br><span class="line">//最大锁定内存的值，单位是kbyte，默认是64</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">//最大可用常驻内存值</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">//最大打开的文件数</span><br><span class="line">open files                      (-n) 65535</span><br><span class="line">//管道最大缓冲区的值</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">//消息队列的最大值，单位是byte</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">//程序的实时性优先级</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">//栈大小，单位是kbyte</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">//最大CPU占用时间</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">//用户最大进程数</span><br><span class="line">max user processes              (-u) 4096</span><br><span class="line">//最大虚拟内存</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">//文件锁</span><br><span class="line">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure><p>如果要修改某个值<br>ulimit 参数 值<br>使用-S 单独设置软限制<br>使用-H 单独设置硬限制</p><p>建议将所有的改动放在ulimit的系统配置文件中。</p><h3 id="测试表达式：test"><a href="#测试表达式：test" class="headerlink" title="测试表达式：test"></a>测试表达式：test</h3><p>用于测试表达式EXPRESSION的值，根据测试结果返回0（失败）或1（成功）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> EXPRESSION</span><br></pre></td></tr></table></figure><h1 id="Shell编程基础"><a href="#Shell编程基础" class="headerlink" title="Shell编程基础"></a>Shell编程基础</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>局部变量仅在定义该变量的shell中生效，而对其他的shell没有影响。<br>环境变量通常又称“全局变量”，以区别于局部变量。<br>在shell脚本中，变量默认就是全局的，无论在脚本的任何位置声明。<br>环境变量只能向下传递而不能向上传递。<br>在一个shell中创建子shell最简单的方式是运行bash命令。<br>使用export内建命令可以将变量导出为环境变量。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>bash中默认包含几十个预设的环境变量。</p><h4 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h4><p>Bash shell的全路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$BASH</span></span><br></pre></td></tr></table></figure><h4 id="BASH-VERSION"><a href="#BASH-VERSION" class="headerlink" title="BASH_VERSION"></a>BASH_VERSION</h4><p>Bash Shell的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$BASH_VERSION</span></span><br></pre></td></tr></table></figure><h4 id="CDPATH"><a href="#CDPATH" class="headerlink" title="CDPATH"></a>CDPATH</h4><p>用于快速进入某个目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CDPATH=<span class="string">"/home/tovi/"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CDPATH</span></span><br></pre></td></tr></table></figure><h4 id="EUID"><a href="#EUID" class="headerlink" title="EUID"></a>EUID</h4><p>记录当前用户的UID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$EUID</span></span><br></pre></td></tr></table></figure><h4 id="FUNCNAME"><a href="#FUNCNAME" class="headerlink" title="FUNCNAME"></a>FUNCNAME</h4><p>在用户函数体内部，记录当前函数体的函数名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">funcname()</span><br><span class="line">&#123;</span><br><span class="line">   echo $FUNCNAME</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">funcname</span><br><span class="line">输出为：</span><br><span class="line">funcname</span><br></pre></td></tr></table></figure><h4 id="HISTCMD"><a href="#HISTCMD" class="headerlink" title="HISTCMD"></a>HISTCMD</h4><p>记录下一条命令在history命令中的编号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br><span class="line">...</span><br><span class="line">1016 <span class="built_in">history</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HISTCMD</span></span><br></pre></td></tr></table></figure><p>输出为：1018</p><h4 id="HISTFILE"><a href="#HISTFILE" class="headerlink" title="HISTFILE"></a>HISTFILE</h4><p>记录history命令记录文件的位置。<br>history只不过是找到$HISTFILE所指定的命令记录文件，并将其打印出来。<br>一般默认每个用户的家目录下都有一个.bash_history文件，用于记录该用户运行过的命令历史记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$HISTFILE</span></span><br><span class="line">输出为：/home/tovi/.bash_history</span><br></pre></td></tr></table></figure><h4 id="HISTFILESIZE"><a href="#HISTFILESIZE" class="headerlink" title="HISTFILESIZE"></a>HISTFILESIZE</h4><p>设置HISTFILE文件记录命令的行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看记录命令行数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HISTFILESIZE</span></span><br></pre></td></tr></table></figure><h4 id="HISTSIZE"><a href="#HISTSIZE" class="headerlink" title="HISTSIZE"></a>HISTSIZE</h4><p>事实上Linux并不会每次运行一个命令后立即将该命令记录到HISTFILE文件中，而是存在一个缓冲区机制。<br>在缓冲区满或退出shell才会将缓冲区中的记录写到HISTFILE中。<br>缓冲区大小由HISTSIZE定义。</p><h4 id="HOSTNAME"><a href="#HOSTNAME" class="headerlink" title="HOSTNAME"></a>HOSTNAME</h4><p>显示主机名</p><h4 id="HOSTTYPE"><a href="#HOSTTYPE" class="headerlink" title="HOSTTYPE"></a>HOSTTYPE</h4><p>展示主机架构</p><h4 id="MACHTYPE"><a href="#MACHTYPE" class="headerlink" title="MACHTYPE"></a>MACHTYPE</h4><p>主机类型的GNU标识，这种标识有统一的结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$MACHTYPE</span></span><br><span class="line">-&gt;x86_64-redhat-linux-gnu</span><br></pre></td></tr></table></figure><h4 id="LANG"><a href="#LANG" class="headerlink" title="LANG"></a>LANG</h4><p>设置当前系统的语言环境</p><h4 id="OLDPWD"><a href="#OLDPWD" class="headerlink" title="OLDPWD"></a>OLDPWD</h4><p>记录之前目录</p><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><p>代表命令的搜索路径。</p><h4 id="PS1"><a href="#PS1" class="headerlink" title="PS1"></a>PS1</h4><p>命令提示符[\u@\h\W]\$<br>\u是用户名、\h是主机名、\W是当前工作目录的basename、\$是用户UID的替换字符，如果UID是0则替换成#</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>变量以字母或者下划线开头，后面跟数字、字母和下划线，变量长度没有限制。<br>shell变量是区分大小写的。<br>如果变量值引用的是其他变量，则必须使用双引号。因为单引号会阻止shell解析$。</p><h3 id="取消变量"><a href="#取消变量" class="headerlink" title="取消变量"></a>取消变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> 变量名</span><br></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><p>脚本或命令返回值:$?<br>$?返回上一个命令的返回值，判断之前命令的执行状态。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>shell变量时弱类型的，并不要求数组的每个元素都是相同类型。<br>shell中的数字对元素个数没有限制，但只支持一维数组。</p><h4 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> -a Array</span><br><span class="line">Array[0]=0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;数组名[索引]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Array[0]&#125;</span></span><br><span class="line">//一次性取出所有元素的值</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Array[@]&#125;</span></span><br><span class="line">//获取数组元素个数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Array[@]&#125;</span></span><br><span class="line">//如果某个元素是字符串，可以通过指定索引的方式获得该元素的长度</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Array[2]&#125;</span></span><br><span class="line">//取出数组中的第一、第二个元素</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Array[@]:1:2&#125;</span></span><br><span class="line">//取出第二个元素从第0个字符开始连续5个字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Array[2]:0:5&#125;</span></span><br><span class="line">//连接数组：将若干个数组进行拼接操作</span><br><span class="line">Conn=(<span class="variable">$&#123;Array[@]&#125;</span> <span class="variable">$&#123;Name[@]&#125;</span>)</span><br><span class="line">//替换元素</span><br><span class="line">array=(<span class="variable">$&#123;array[@]/3/4&#125;</span>)</span><br><span class="line">//取消数组元素</span><br><span class="line"><span class="built_in">unset</span> array[2]</span><br><span class="line">//取消数组</span><br><span class="line"><span class="built_in">unset</span> array</span><br></pre></td></tr></table></figure><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>readonly内建命令创建的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">readonly</span> 变量名=数据</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在Linux系统中，不同进程ID的shell默认为一个不同的命名空间。</p><h2 id="转义和引用"><a href="#转义和引用" class="headerlink" title="转义和引用"></a>转义和引用</h2><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>是指使用转义符引用单个字符，从而使其表达单纯的字符的字面含义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \<span class="variable">$Dollar</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>是指将字符串用某种符号括起来，以防止特殊字符被解析成其他意思。<br>双引号又叫“部分引用”或“弱引用”，可以引用除$符、反引号、转义符之外的所有字符。<br>单引号又叫“全引用”或“强引用”，可以引用所有字符。<br>反引号则会将反引号括起的内容解释为系统命令。</p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换是指将命令的标准输出作为值赋给某个变量。<br><code>命令</code>或 $(命令)<br>如果被引用的命令输出的内容包括多行，此时若不通过引用的方式输出变量，则输出的内容中将会删除换行符，文件名之间会使用系统默认的空来填充，即输出的内容只占一行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LS=`ls -l`</span><br></pre></td></tr></table></figure><p>echo $LS 和 echo “$LS” 的区别，小伙伴可以上机去试一下</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>内建命令 let</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//左移两位</span><br><span class="line"><span class="built_in">let</span> <span class="string">"value=4&lt;&lt;2"</span></span><br></pre></td></tr></table></figure><p>按位与运算&amp; ，对应的二进制值都为1时，结果才为1<br>按位或运算| ，对应的二进制值为1时，结果就为1<br>按位异或运算^，对应的位置同为1或同为0，结果就为0<br>按位非~ “~a” 的值为”-(a+1)”</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p><em>代表任意长度的字符串。<br>例：a</em>可以匹配以a开头的任意长度的字符串，但是不包括点号和斜线号。<br>?可用于匹配任一单个字符。<br>[]代表匹配其中的一个字符。<br>例：[abc]代表匹配a或者b或者c。</p><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><p>#!不会被理解成注释，#！必须出现在整个脚本的第一行。</p><p>date： 2018-08-15 更新</p><h1 id="测试和判断"><a href="#测试和判断" class="headerlink" title="测试和判断"></a>测试和判断</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ ls /var/<span class="built_in">log</span>/messages</span><br><span class="line">/var/<span class="built_in">log</span>/messages</span><br><span class="line"><span class="comment">#如果ls 有成功返回，则$?返回值为0，说明该文件存在</span></span><br><span class="line">[tovi@toviserver ~]$ <span class="built_in">echo</span> $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>很多时候需要自己来实现这个“判断”的过程，判断为真则返回0，为假则返回非0。<br>这种判断行为被称作“测试”。</p><h3 id="测试结构"><a href="#测试结构" class="headerlink" title="测试结构"></a>测试结构</h3><p>#第一种测试方式</p><p>#其中expression是一个表达式，可以是算数比较、字符串比较、文本和文件属性比较等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> expression</span><br></pre></td></tr></table></figure><p>#第二种测试方式</p><p>#推荐使用第二种，这种方式更容易与条件判断的关键字连用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expression ]</span><br></pre></td></tr></table></figure><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件测试方法一</span></span><br><span class="line"><span class="built_in">test</span> file_operator file</span><br><span class="line"><span class="comment">#文件测试方法二</span></span><br><span class="line">[ file_operator file ]</span><br></pre></td></tr></table></figure><p>其中 file_operator是文件测试符，file是文件、目录（可以是文件或目录的全路径）<br><img src="/2018/08/16/Shell/文件测试符.png" alt=""></p><p>#测试某个文件的读、写、执行属性的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p "what file do you want to test?" filename</span><br><span class="line"></span><br><span class="line">if [ ! -e "$filename" ]; then</span><br><span class="line">echo "The file does not exist."</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -r "$filename" ]; then</span><br><span class="line">echo "The file is readable."</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -w "$filename" ]; then</span><br><span class="line">echo "The file is writeable."</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -x "$filename" ]; then</span><br><span class="line">echo "The file is executable."</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h3><p>shell字符串比较主要有等于、不等于、大于、小于、是否为空等测试。<br><img src="/2018/08/16/Shell/字符串测试.png" alt=""></p><h3 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h3><p>一种简单的算数运算，在于比较两个整数的大小关系，测试成立则返回0.<br><img src="/2018/08/16/Shell/整数测试符.png" alt=""></p><h3 id="逻辑测试符和逻辑运算符"><a href="#逻辑测试符和逻辑运算符" class="headerlink" title="逻辑测试符和逻辑运算符"></a>逻辑测试符和逻辑运算符</h3><p>逻辑测试主要有逻辑非、逻辑与、逻辑或3种。<br><img src="/2018/08/16/Shell/逻辑测试符.png" alt=""><br>shell中也有逻辑运算符<br><img src="/2018/08/16/Shell/逻辑运算符.png" alt=""><br>类似于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑与运算</span></span><br><span class="line">expression1 &amp;&amp; expression2 &amp;&amp; expression3</span><br><span class="line"><span class="comment">#逻辑与测试</span></span><br><span class="line">[ expression1 -a expression2 -a expression3 ]</span><br></pre></td></tr></table></figure><p>在实践过程中，常会将逻辑与、逻辑或的这些特点联合起来使用<br>expression &amp;&amp; DoWhenExpressionTrue || DoWhenExpressionFalse<br>shell会首先计算expression，并返回值。<br>如果返回为真，将会执行&amp;&amp;后的代码DoWhenExpressionTrue,如果该语句执行成功，则expression &amp;&amp; DoWhenExpressionTrue整体返回0，使用||连接的DoWhenExpressionFalse将不会被执行。<br>如果返回为假，将会跳过&amp;&amp;后的代码DoWhenExpressionTrue,这时由于expression&amp;&amp;DoWhenExpressionTrue整体返回假，则使用||连接的DoWhenExpressionFalse一定会被执行。</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if判断结构"><a href="#if判断结构" class="headerlink" title="if判断结构"></a>if判断结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if expression; then</span><br><span class="line">    command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="if-else判断结构"><a href="#if-else判断结构" class="headerlink" title="if/else判断结构"></a>if/else判断结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if expression; then</span><br><span class="line">     command</span><br><span class="line">else</span><br><span class="line">     command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="if-elif-else判断结构"><a href="#if-elif-else判断结构" class="headerlink" title="if/elif/else判断结构"></a>if/elif/else判断结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if expression; then</span><br><span class="line">     command</span><br><span class="line">elif expression; then</span><br><span class="line">     command</span><br><span class="line">else expression</span><br><span class="line">     command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="case判断结构"><a href="#case判断结构" class="headerlink" title="case判断结构"></a>case判断结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">case VAR in</span><br><span class="line">var1) command1 ;;</span><br><span class="line">var2) command2 ;;</span><br><span class="line">var3) command3 ;;</span><br><span class="line">...</span><br><span class="line">*) command ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>在无一匹配的情况下匹配最后的默认*，并执行后面的默认命令。</p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>shell中最常见的循环结构</p><h3 id="带列表的for循环"><a href="#带列表的for循环" class="headerlink" title="带列表的for循环"></a>带列表的for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for VARIABLE in (list)</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>可以使用seq命令结合命令替换得到方式生成列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat for_list03.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">for VAR in `seq 1 100`</span><br><span class="line">do</span><br><span class="line">let "sum+=VAR"</span><br><span class="line">done</span><br><span class="line">echo "total: $sum"</span><br></pre></td></tr></table></figure><p>可见，列表for循环in后面的内容可以是任意命令的标准输出。</p><h3 id="不带列表的for循环"><a href="#不带列表的for循环" class="headerlink" title="不带列表的for循环"></a>不带列表的for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for VARIABLE</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这种写法需要在运行脚本时通过参数的方式给for循环传递变量值<br>即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat for_list06.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for VARIABLE in $@</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">echo -n $VARIABLE</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line">[tovi@toviserver ~]$ bash for_list06.sh  1 2 1 2 1 5 1 2</span><br><span class="line">12121512</span><br></pre></td></tr></table></figure><h3 id="类C的for循环"><a href="#类C的for循环" class="headerlink" title="类C的for循环"></a>类C的for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for((expression1; expression2; expression3))</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat c_for01.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">echo "$i "</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[tovi@toviserver ~]$ bash c_for01.sh </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 </span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9 </span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="for的无限循环"><a href="#for的无限循环" class="headerlink" title="for的无限循环"></a>for的无限循环</h3><p>在开发的时候尽量避免意料之外的无限循环。<br>制造无限循环很容易，只需保证expression2永远为真就可以了。<br>for((;1;))就可以</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="while循环的语法"><a href="#while循环的语法" class="headerlink" title="while循环的语法"></a>while循环的语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while expression</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>相当于设置一个计数器，在达到规定的循环次数后退出循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat while01.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">conter=5</span><br><span class="line">while [[ $conter -gt 0 ]]</span><br><span class="line">do</span><br><span class="line">echo -n "$conter"</span><br><span class="line">let "conter-=1"</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">[tovi@toviserver ~]$ bash while01.sh </span><br><span class="line">54321</span><br></pre></td></tr></table></figure><h3 id="使用while按行读取文件"><a href="#使用while按行读取文件" class="headerlink" title="使用while按行读取文件"></a>使用while按行读取文件</h3><p>使用重定向符的while只会产生一个shell，而使用管道的脚本在运行时会产生3个shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat while02.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while read LINE</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">NAME=`echo $LINE | awk '&#123;print $1&#125;'`</span><br><span class="line">AGE=`echo $LINE | awk '&#123;print $2&#125;'`</span><br><span class="line">SEX=`echo $LINE | awk '&#123;print $3&#125;'`</span><br><span class="line"></span><br><span class="line">echo "My name is $NAME ,i'm $AGE years old ,i'm a $SEX"</span><br><span class="line">done &lt; student_info.txt</span><br><span class="line">[tovi@toviserver ~]$ bash while02.sh </span><br><span class="line">My name is tovi ,i'm 20 years old ,i'm a boy</span><br><span class="line">My name is tovi1 ,i'm 20 years old ,i'm a boy</span><br></pre></td></tr></table></figure><h3 id="while的无限循环"><a href="#while的无限循环" class="headerlink" title="while的无限循环"></a>while的无限循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while ((1))</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><h3 id="until循环的语法"><a href="#until循环的语法" class="headerlink" title="until循环的语法"></a>until循环的语法</h3><p>until循环也是运行前测试，但until采用的是测试假值的方式，当测试结果为假时才继续执行循环体，直到测试为真时才停止循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until expression</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="until的无限循环"><a href="#until的无限循环" class="headerlink" title="until的无限循环"></a>until的无限循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until false</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="select循环"><a href="#select循环" class="headerlink" title="select循环"></a>select循环</h2><p>select是一种菜单扩展循环方式，基本结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select MENU in (list)</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat select01.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "which car do you prefer"</span><br><span class="line">select CAR in benz audi volkswagen</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">break</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "you prefer $CAR"</span><br><span class="line">[tovi@toviserver ~]$ bash select01.sh </span><br><span class="line">which car do you prefer</span><br><span class="line">1) benz</span><br><span class="line">2) audi</span><br><span class="line">3) volkswagen</span><br><span class="line"><span class="meta">#</span><span class="bash">? 1</span></span><br><span class="line">you prefer benz</span><br></pre></td></tr></table></figure><h2 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h2><p>一个循环语句中的循环体是另一个循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat nesting01.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">while [[ "$i" -le "9" ]]</span><br><span class="line">do</span><br><span class="line">j=1</span><br><span class="line"></span><br><span class="line">while [[ "$j" -le "9" ]]</span><br><span class="line">do</span><br><span class="line">let "multi=$i*$j"</span><br><span class="line">echo -n "$i*$j=$multi"</span><br><span class="line">let "j+=1"</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line">let "i+=1"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[tovi@toviserver ~]$ bash nesting01.sh </span><br><span class="line">1*1=11*2=21*3=31*4=41*5=51*6=61*7=71*8=81*9=9</span><br><span class="line">2*1=22*2=42*3=62*4=82*5=102*6=122*7=142*8=162*9=18</span><br><span class="line">3*1=33*2=63*3=93*4=123*5=153*6=183*7=213*8=243*9=27</span><br><span class="line">4*1=44*2=84*3=124*4=164*5=204*6=244*7=284*8=324*9=36</span><br><span class="line">5*1=55*2=105*3=155*4=205*5=255*6=305*7=355*8=405*9=45</span><br><span class="line">6*1=66*2=126*3=186*4=246*5=306*6=366*7=426*8=486*9=54</span><br><span class="line">7*1=77*2=147*3=217*4=287*5=357*6=427*7=497*8=567*9=63</span><br><span class="line">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=648*9=72</span><br><span class="line">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>break用于终止当前整个循环体。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat break01.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line">while [[ "$i" -le "9" ]]</span><br><span class="line">do</span><br><span class="line">j=1</span><br><span class="line">while [[ "$j" -le "9" ]]</span><br><span class="line">do</span><br><span class="line">if [[ "$j" -le "$i" ]]; then</span><br><span class="line">let "multi=$i*$j"</span><br><span class="line">echo -n "$i*$j=$multi"</span><br><span class="line">else</span><br><span class="line">break</span><br><span class="line">fi</span><br><span class="line">let "j+=1"</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line">let "i+=1"</span><br><span class="line">done</span><br><span class="line">[tovi@toviserver ~]$ bash break01.sh </span><br><span class="line">1*1=1</span><br><span class="line">2*1=22*2=4</span><br><span class="line">3*1=33*2=63*3=9</span><br><span class="line">4*1=44*2=84*3=124*4=16</span><br><span class="line">5*1=55*2=105*3=155*4=205*5=25</span><br><span class="line">6*1=66*2=126*3=186*4=246*5=306*6=36</span><br><span class="line">7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span><br><span class="line">8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span><br><span class="line">9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span><br></pre></td></tr></table></figure><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>continue语句用于结束当前循环转而进入下一次循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[tovi@toviserver ~]$ cat continue02.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for ((i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">for ((j=2;j&lt;i;j++))</span><br><span class="line">do</span><br><span class="line">if !(($i%$j)); then</span><br><span class="line">continue 2</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line">echo -n "$i "</span><br><span class="line">done</span><br><span class="line">echo</span><br><span class="line">[tovi@toviserver ~]$ bash continue02.sh </span><br><span class="line">1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shell编程概述&quot;&gt;&lt;a href=&quot;#Shell编程概述&quot; class=&quot;headerlink&quot; title=&quot;Shell编程概述&quot;&gt;&lt;/a&gt;Shell编程概述&lt;/h1&gt;&lt;h2 id=&quot;Shell简介&quot;&gt;&lt;a href=&quot;#Shell简介&quot; class=&quot;headerlink&quot; title=&quot;Shell简介&quot;&gt;&lt;/a&gt;Shell简介&lt;/h2&gt;&lt;h3 id=&quot;Shell是什么&quot;&gt;&lt;a href=&quot;#Shell是什么&quot; class=&quot;headerlink&quot; title=&quot;Shell是什么&quot;&gt;&lt;/a&gt;Shell是什么&lt;/h3&gt;&lt;p&gt;在计算机语言中，shell是指一种命令行解释器，是为用户和操作系统之间通信提供的一种接口，它接受来自用户输入的命令，并将其转化为一系列的系统调用送到内核执行，并将结果输出给用户。&lt;br&gt;shell分成两大类：一类是图形界面shell（Graphical User Interface），另一种是命令行式shell（Command Line Interface）。&lt;br&gt;shell还是一种解释型语言，这种语言经过编写后不需要做任何编译就可以运行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2018/08/16/Linux/"/>
    <id>http://yoursite.com/2018/08/16/Linux/</id>
    <published>2018-08-16T01:40:26.000Z</published>
    <updated>2018-08-16T01:40:26.091Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库学习</title>
    <link href="http://yoursite.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/02/数据库学习/</id>
    <published>2018-08-02T02:40:00.000Z</published>
    <updated>2018-08-02T03:35:32.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。<br>事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。<br><a id="more"></a><br>事务的定义：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></p><p>事务的特性：（ACID）<br>Atomicity 原子性：要么不做，要么全做。<br>Consistency 一致性：从一个一致状态到另一个一致状态。<br>Isolation 隔离性：一个事务不能被其他事务干扰，并发控制就是为了保证事务的隔离性。<br>Durability 持久性：事务一旦提交，它对数据库中数据的改变是持久的。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><p>Oracle建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table1 (</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   varchar2(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table1 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DB2建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table2(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table2 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>informix建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table3(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>) <span class="keyword">constraint</span> table3</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="视图语句"><a href="#视图语句" class="headerlink" title="视图语句"></a>视图语句</h3><p>创建视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> t <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> b;</span><br></pre></td></tr></table></figure></p><p>删除视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> t;</span><br></pre></td></tr></table></figure></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>数据库中的索引是某个表中一列或多列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。<br>创建唯一性：不允许两行具有相同的索引值（创建了唯一约束，系统将自动创建唯一索引）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure></p><p>创建普通索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column_name);</span><br></pre></td></tr></table></figure></p><p>删除索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br></pre></td></tr></table></figure></p><p>主键索引：主键索引要求主键中的每个值是唯一的，（创建主键自动创建主键索引）<br>聚集索引(CLUSTERED)&lt;查询速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序相同，表中只能包含一个聚集索引，主键列默认为聚集索引<br>非聚集索引(NONCLUSTERED)&lt;更新速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序不匹配，表中可以有249个非聚集索引</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>序列是一数据库对象，利用它可生成唯一的整数。一般使用序列自动地生成主码值。一个序列的值是由特别的Oracle程序自动生成。</p><p>创建序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> sequence_name</span><br><span class="line"><span class="keyword">minvalue</span> <span class="number">1</span> </span><br><span class="line">maxvalue <span class="number">9999999</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>  </span><br><span class="line">nocache</span><br><span class="line"><span class="keyword">cycle</span> </span><br><span class="line"><span class="keyword">order</span>;</span><br><span class="line">INCREMENT BY： 指定序列号之间的间隔，该值可为正的或负的整数，但不可为0。序列为升序。忽略该子句时，缺省值为1。</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span>：指定生成的第一个序列号。在升序时，序列可从比最小值大的值开始，缺省值为序列的最小值。对于降序，序列可由比最大值小的值开始，缺省值为序列的最大值。</span><br><span class="line">MAXVALUE：指定序列可生成的最大值。</span><br><span class="line"><span class="keyword">NOMAXVALUE</span>：为升序指定最大值为<span class="number">1027</span>，为降序指定最大值为<span class="number">-1</span>。</span><br><span class="line"><span class="keyword">MINVALUE</span>：指定序列的最小值。</span><br><span class="line"><span class="keyword">NOMINVALUE</span>：为升序指定最小值为<span class="number">1</span>。为降序指定最小值为<span class="number">-1026</span>。</span><br><span class="line"><span class="keyword">CYCLE</span>: 循环使用，到达最大值或者最小值时，从新建立对象</span><br><span class="line"><span class="keyword">CACHE</span> X: 制定存入缓存（也就是内存）序列值的个数</span><br></pre></td></tr></table></figure></p><p>删除序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> sequence_name;</span><br></pre></td></tr></table></figure></p><p>修改序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">sequence</span> sequence_name <span class="keyword">cycle</span>;</span><br></pre></td></tr></table></figure></p><p>查询序列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">nextval</span> <span class="keyword">for</span> FYCK <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">from</span> ywty_xtywzt;</span><br></pre></td></tr></table></figure></p><h3 id="基本表操作"><a href="#基本表操作" class="headerlink" title="基本表操作"></a>基本表操作</h3><p>删除表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table1;</span><br></pre></td></tr></table></figure></p><p>插入表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(<span class="keyword">id</span>,qssi) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure></p><p>删除表数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> table1 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>更新表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> qssi=<span class="string">'2'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>修改字段长度<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi varchar2(<span class="number">21</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">varchar</span>(<span class="number">22</span>);</span><br></pre></td></tr></table></figure></p><p>更改字段类型<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span>(qssi <span class="built_in">integer</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);只可以加宽，不能更改类型</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">integer</span>;</span><br></pre></td></tr></table></figure></p><p>增加列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">add</span> mail <span class="built_in">varchar</span>(<span class="number">128</span>);</span><br></pre></td></tr></table></figure></p><p>删除列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> <span class="keyword">column</span> mail;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供删除列功能（解决办法是删除表，重建）</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> mail;</span><br></pre></td></tr></table></figure></p><p>更改列名<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">rename</span> <span class="keyword">column</span> mail <span class="keyword">to</span> mail2;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供更改列名功能（解决办法同删除，或者通过建立一个新视图解决）</span><br></pre></td></tr></table></figure></p><p>更改列的限制（主键、非空）<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="literal">null</span>/<span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> <span class="keyword">column</span> qssi <span class="keyword">drop</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="built_in">varchar</span> <span class="literal">null</span>/noy <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>取前N条记录<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> <span class="keyword">rownum</span> &lt;=n ;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">fetch</span> <span class="keyword">first</span> n <span class="keyword">rows</span> <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">first</span> n * <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>取当前日期<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">timestamp</span> <span class="keyword">from</span> sysibm.sysdummy1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">from</span> sysmaster:sysshmvals;</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>空值转换<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nvl(ajsm,<span class="number">0</span>) <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">value</span>(ajsm,<span class="string">''</span>)  <span class="keyword">FROM</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  nvl(by1,<span class="number">0</span>) <span class="keyword">FROM</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><p>取值判断<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> ywsqbh <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><h2 id="sql后台执行命令"><a href="#sql后台执行命令" class="headerlink" title="sql后台执行命令"></a>sql后台执行命令</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus gapsdb/gapsdb@ora11g</span><br><span class="line">@test.sql</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2 connect to agent21t user dba using HDb2@M01</span><br><span class="line">db2 –tvf 文件名 –z 执行日志文件</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbaccess y4tinf epcc.sql</span><br></pre></td></tr></table></figure></p><h3 id="数据库启停"><a href="#数据库启停" class="headerlink" title="数据库启停"></a>数据库启停</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：conn /as sysdba</span><br><span class="line">启动：startup</span><br><span class="line">停止：shutdown</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：db2 connect to test</span><br><span class="line">启动：db2start</span><br><span class="line">停止：db2stop</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动：oninit –vy</span><br><span class="line">停止：onmode –ky</span><br></pre></td></tr></table></figure></p><h2 id="sql共享原理"><a href="#sql共享原理" class="headerlink" title="sql共享原理"></a>sql共享原理</h2><p>ORACLE将执行过的SQL语句存放在内存的共享池(shared buffer pool)中，可以被所有的数据库用户共享。<br>当你执行一个SQL语句(有时被称为一个游标)时,如果它和之前的执行过的语句完全相同,ORACLE就能很快获得已经被解析的语句以及最好的执行路径. 这个功能大大地提高了SQL的执行性能并节省了内存的使用。<br>可惜的是，Oracle只对简单的表提供高速缓冲(cache bufferiIl，这个功能并不适用于多表连接查询。数据库管理员必须在启动参数文件中为这个区域设置合适的参数，当这个内存区域越大，就可以保留更多的语句，当然被共享的可能性也就越大了。当向Oracle提交一个SQL语句时，Oracle会首先在这块内存中查找相同的语句。<br>Oracle对两者采取的是一种严格匹配策略，要达成共享。SQL语句必须完全相同(包括空格、换行等)。<br>能够使用共享的语句必须满足三个条件：<br>1）字符级的比较。<br>当前被执行的语句和共享池中的语句必须完全相同。<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ATABLE；和下面每一个<span class="keyword">SQL</span>语句都不同：</span><br><span class="line"><span class="keyword">SELECT</span>  *<span class="keyword">from</span> ATABLE</span><br><span class="line"><span class="keyword">Select</span>  * <span class="keyword">From</span> Atable；</span><br></pre></td></tr></table></figure><p>2）语句所指对象必须完全相同 即两条SQL语句操作的数据库对象必须同一。<br>3）语句中必须使用相同命名的绑定变量。如：第一组的两个SQL语句是相同的，可以共享；而第二组中两个语句不同，即使在运行时赋予不同的绑定变量以相同的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =  ：blk1.pin；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.pin；</span><br><span class="line">第二组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.ot_jnd；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin = ：blk1.ov_jnd；</span><br></pre></td></tr></table></figure><p>当一个Oracle实例接收一条sql后的顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> a <span class="keyword">Cursor</span> 创建游标</span><br><span class="line"><span class="keyword">Parse</span> the <span class="keyword">Statement</span> 分析语句</span><br><span class="line"><span class="keyword">Describe</span> Results <span class="keyword">of</span> a <span class="keyword">Query</span> 描述查询的结果集</span><br><span class="line"><span class="keyword">Define</span> <span class="keyword">Output</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 定义查询的输出数据</span><br><span class="line">Bind <span class="keyword">Any</span> <span class="keyword">Variables</span> 绑定变量</span><br><span class="line">Parallelize the <span class="keyword">Statement</span> 并行执行语句</span><br><span class="line">Run the <span class="keyword">Statement</span> 运行语句</span><br><span class="line"><span class="keyword">Fetch</span> <span class="keyword">Rows</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 取查询出来的行</span><br><span class="line"><span class="keyword">Close</span> the <span class="keyword">Cursor</span> 关闭游标</span><br></pre></td></tr></table></figure><h2 id="重编译问题"><a href="#重编译问题" class="headerlink" title="重编译问题"></a>重编译问题</h2><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dConMsg <span class="keyword">where</span> contract_no = <span class="number">32013484095139</span></span><br></pre></td></tr></table></figure><p>这个语句每执行一次就需要在SHARE POOL 硬解析一次，一百万用户就是一百万次，消耗CPU和内存，如果业务量大，很可能导致宕库……<br>如果绑定变量，则只需要硬解析一次，重复调用即可</p><h3 id="绑定变量解决重新编译问题"><a href="#绑定变量解决重新编译问题" class="headerlink" title="绑定变量解决重新编译问题"></a>绑定变量解决重新编译问题</h3><p>未使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sprintf(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> scott.test1 (num1, num2) <span class="keyword">values</span> </span><br><span class="line"> (%d,%d)<span class="string">",n_var1, n_var2);</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE IMMEDIATE :sqlstr ;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><p>使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strcpy(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> (num1, num2) <span class="keyword">values</span> (:v1, :v2)<span class="string">");</span></span><br><span class="line"><span class="string">EXEC SQL PREPARE sql_stmt FROM :sqlstr;</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE sql_stmt USING :n_var1, :n_var2;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><h2 id="sql语句的处理过程"><a href="#sql语句的处理过程" class="headerlink" title="sql语句的处理过程"></a>sql语句的处理过程</h2><h3 id="解析-PARSE"><a href="#解析-PARSE" class="headerlink" title="解析(PARSE)"></a>解析(PARSE)</h3><pre><code>在共享池中查找SQL语句检查语法检查语义和相关的权限合并(MERGE)视图定义和子查询确定执行计划</code></pre><h3 id="绑定-BIND"><a href="#绑定-BIND" class="headerlink" title="绑定(BIND)"></a>绑定(BIND)</h3><pre><code>在语句中查找绑定变量赋值(或重新赋值)</code></pre><h3 id="执行-EXECUTE"><a href="#执行-EXECUTE" class="headerlink" title="执行(EXECUTE)"></a>执行(EXECUTE)</h3><pre><code>应用执行计划执行必要的I/O和排序操作</code></pre><h3 id="提取-FETCH"><a href="#提取-FETCH" class="headerlink" title="提取(FETCH)"></a>提取(FETCH)</h3><pre><code>从查询结果中返回记录必要时进行排序</code></pre><h2 id="sql优化的一般性原则"><a href="#sql优化的一般性原则" class="headerlink" title="sql优化的一般性原则"></a>sql优化的一般性原则</h2><p>目标：<br>    减少服务器资源消耗（主要是磁盘IO）.<br>设计方面：<br>    尽量依赖oracle的优化器，并为其提供条件；<br>    合适的索引.<br>编码方面：<br>    利用索引，避免大表FULL TABLE SCAN；<br>    避免写过于复杂的sql，不一定非要一个sql解决问题；<br>    在不影响业务的前提下减小事务的粒度.</p><h3 id="优化概括"><a href="#优化概括" class="headerlink" title="优化概括"></a>优化概括</h3><p>创建表的时候。应尽量建立主键，大数据表删除，用truncate table代替delete。<br>合理使用索引，在OLTP（数仓）应用中一张表的索引不要太多。组合索引的列顺序尽量与查询条件列顺序保持一致。<br>查询尽量用确定的列名，少用<em>号。select count(key)from tab where key&gt; 0性能优于select count(</em>)from tab；<br>尽量少嵌套子查询，这种查询会消耗大量的CPU资源；对于有比较多or运算的查询，建议分成多个查询，用union all联结起来；多表查询的查询语句中，选择最有效率的表名顺序。Oracle解析器对表解析从右到左，所以记录少的表放在右边。<br>尽量多用commit语句提交事务，可以及时释放资源、解锁、释放日志空间、减少管理花费。</p><h3 id="用UNION-ALL-替换UNION"><a href="#用UNION-ALL-替换UNION" class="headerlink" title="用UNION-ALL 替换UNION"></a>用UNION-ALL 替换UNION</h3><p>当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><h3 id="避免在索引列上使用函数"><a href="#避免在索引列上使用函数" class="headerlink" title="避免在索引列上使用函数"></a>避免在索引列上使用函数</h3><p>WHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL * <span class="number">12</span> &gt; <span class="number">25000</span>;</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL  &gt; <span class="number">25000</span>/<span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="避免使用前置通配符"><a href="#避免使用前置通配符" class="headerlink" title="避免使用前置通配符"></a>避免使用前置通配符</h3><p>WHERE子句中, 如果索引列所对应的值的第一个字符由通配符(WILDCARD)开始, 索引将不被采用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER_NO,USER_NAME,ADDRESS <span class="keyword">FROM</span> USER_FILES <span class="keyword">WHERE</span> USER_NO <span class="keyword">LIKE</span> <span class="string">'%109204421'</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，ORACLE将使用全表扫描</p><h3 id="避免在索引列上使用NOT"><a href="#避免在索引列上使用NOT" class="headerlink" title="避免在索引列上使用NOT"></a>避免在索引列上使用NOT</h3><p>通常，我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE遇到NOT,他就会停止使用索引转而执行全表扫描.<br>低效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE ! = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>高效: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="用NOT-EXISTS-替代-NOT-IN"><a href="#用NOT-EXISTS-替代-NOT-IN" class="headerlink" title="用NOT EXISTS 替代 NOT IN"></a>用NOT EXISTS 替代 NOT IN</h3><p>在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历).<br>使用NOT EXISTS 子句可以有效地利用索引。尽可能使用NOT EXISTS来代替NOT IN，尽管二者都使用了NOT（不能使用索引而降低速度），NOT EXISTS要比NOT IN查询效率更高。<br>语句1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><p>语句2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept.deptno = emp.deptno);</span><br></pre></td></tr></table></figure><p>语句2比语句1的执行性能好很多</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。&lt;br&gt;事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库,SQL" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL/"/>
    
  </entry>
  
  <entry>
    <title>Makefile学习</title>
    <link href="http://yoursite.com/2018/07/31/Makefile%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/31/Makefile学习/</id>
    <published>2018-07-31T06:29:00.000Z</published>
    <updated>2018-08-01T02:47:14.534Z</updated>
    
    <content type="html"><![CDATA[<p>本文借鉴于<br><a href="https://www.cnblogs.com/mfryf/p/3305778.html" target="_blank" rel="noopener">陈皓 (CSDN) 跟我一起写 Makefile</a><br>makefile<br>在Makefile中的命令，必须以[tab]键开始</p><p>Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。<br>Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。</p><p>本博客中默认的编译器是Unix下的GCC和CC<br><a id="more"></a></p><h2 id="关于程序的链接和编译"><a href="#关于程序的链接和编译" class="headerlink" title="关于程序的链接和编译"></a>关于程序的链接和编译</h2><p>一般来说，无论是C还是C++，首先要把源文件编译成中间代码文件，在windows下是.obj文件，Unix下是.o文件，即Object File，这个动作叫做编译。然后再把大量的Object File合成执行文件，这个动作叫做链接（Link）。<br>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。<br>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（LibraryFile)，也就是 .lib文件，在UNIX下，是Archive File，也就是 .a文件。<br>也就是说，源代码首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p><h2 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h2><p>make命令执行时，需要一个 Makefile文件，以告诉make命令需要怎么样的去编译和链接程序。make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重新编译，从而自己编译所需要的文件和连接目标程序</p><h3 id="makefile的规则"><a href="#makefile的规则" class="headerlink" title="makefile的规则"></a>makefile的规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target...:prerequisites...(预备知识，先决条件)</span></span><br><span class="line">command(指令)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label）。<br>prerequisites就是，要生成那个target所需要的文件或是目标<br>command就是make需要执行的命令。（任意的shell命令）<br>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如果一个工程有3个头文件，和8个C文件，为了完成规则：<br>1.如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。<br>2.如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。<br>3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序<br>我们的Makefile文件应该是这样的：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">       cc-c main.c</span><br><span class="line">kbd.o : kbd.c defs.hcommand.h</span><br><span class="line">       cc-c kbd.c</span><br><span class="line">command.o : command.cdefs.h command.h</span><br><span class="line">       cc-c command.c</span><br><span class="line">display.o : display.cdefs.h buffer.h</span><br><span class="line">       cc-c display.c</span><br><span class="line">insert.o : insert.cdefs.h buffer.h</span><br><span class="line">       cc-c insert.c</span><br><span class="line">search.o : search.cdefs.h buffer.h</span><br><span class="line">       cc-c search.c</span><br><span class="line">files.o : files.c defs.hbuffer.h command.h</span><br><span class="line">       cc-c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">       cc-c utils.c</span><br><span class="line">clean :</span><br><span class="line">       rmedit main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。<br>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个Tab键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。<br>clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h3 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="make是如何工作的"></a>make是如何工作的</h3><p>在默认的方式下，也就是我们只输入make命令。那么，<br>1.make会在当前目录下找名字叫“Makefile”或“makefile”的文件<br>2.如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件<br>3.如果edit文件不存在，或是edit所依赖的后面的.o文件的文件修改时间要比edit这个文件新，那么，它就会执行后面所定义的命令来生成edit这个文件<br>4.如果edit所依赖的.o文件也存在，那么make会在当前文件中目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件<br>5.当然了，你的C文件和H文件是存在的，于是make会生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit了</p><p>这就是整个make的依赖性，make会一层一层去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性。</p><p>通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——“make clean”，以此来清除所有的目标文件，以便重编译</p><p>于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。</p><h3 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h3><p>上面的例子中 edit的规则为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br></pre></td></tr></table></figure><p> 我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。</p><p> 所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。比如，我们声明一个变量，叫objects,OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects = main.okbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>于是，我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.osearch.o files.o utils.o </span><br><span class="line"></span><br><span class="line">   edit: $(objects)</span><br><span class="line"></span><br><span class="line">           cc-o edit $(objects)</span><br><span class="line"></span><br><span class="line">   main.o: main.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c main.c</span><br><span class="line"></span><br><span class="line">   kbd.o: kbd.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c kbd.c</span><br><span class="line"></span><br><span class="line">   command.o: command.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c command.c</span><br><span class="line"></span><br><span class="line">   display.o: display.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c display.c</span><br><span class="line"></span><br><span class="line">   insert.o: insert.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c insert.c</span><br><span class="line"></span><br><span class="line">   search.o: search.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c search.c</span><br><span class="line"></span><br><span class="line">   files.o: files.c defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c files.c</span><br><span class="line"></span><br><span class="line">   utils.o: utils.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c utils.c</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit $(objects)</span><br></pre></td></tr></table></figure><p>所以如果以后有新的.o文件加入，我们只需要修改一下objects变量就可以了</p><h3 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="让make自动推导"></a>让make自动推导</h3><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">  edit :<span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">   main.o: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   command.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   display.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   insert.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   search.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   files.o: defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">   utils.o: defs.h</span><br><span class="line"></span><br><span class="line">    .PHONY: clean</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。</p><h3 id="另类风格的makefile"><a href="#另类风格的makefile" class="headerlink" title="另类风格的makefile"></a>另类风格的makefile</h3><p>即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o  insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">    edit: <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$(objects)</span>: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.ocommand.o files.o : command.h</span><br><span class="line"></span><br><span class="line">   display.oinsert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">    .PHONY : clean  //“.PHONY”表示，clean是个伪目标文件</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h3 id="清空目标文件的规则"><a href="#清空目标文件的规则" class="headerlink" title="清空目标文件的规则"></a>清空目标文件的规则</h3><p>每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">      clean:</span><br><span class="line">              -rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>.PHONY意思表示clean是一个“伪目标”。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p><h2 id="makefile综述"><a href="#makefile综述" class="headerlink" title="makefile综述"></a>makefile综述</h2><h3 id="makefile里有什么？"><a href="#makefile里有什么？" class="headerlink" title="makefile里有什么？"></a>makefile里有什么？</h3><p>Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li>显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。</li><li>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。</li><li>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</li><li>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。</li><li>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“#”。</li></ol><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文借鉴于&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/mfryf/p/3305778.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;陈皓 (CSDN) 跟我一起写 Makefile&lt;/a&gt;&lt;br&gt;makefile&lt;br&gt;在Makefile中的命令，必须以[tab]键开始&lt;/p&gt;
&lt;p&gt;Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。&lt;br&gt;Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。&lt;/p&gt;
&lt;p&gt;本博客中默认的编译器是Unix下的GCC和CC&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Makefile，Unix" scheme="http://yoursite.com/tags/Makefile%EF%BC%8CUnix/"/>
    
  </entry>
  
  <entry>
    <title>C语言数组和指针</title>
    <link href="http://yoursite.com/2018/07/31/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2018/07/31/C语言数组和指针/</id>
    <published>2018-07-31T00:54:25.000Z</published>
    <updated>2018-07-31T03:56:05.296Z</updated>
    
    <content type="html"><![CDATA[<p>1.const 关键字声明后数据不能修改<br>2.sizeof 数组名指的是整个数组的大小（以字节为单位）<br>  sizeof 数组名[0]指的是数组中一个元素的大小<br>  整个数组的大小除以单个元素的大小就是数组元素的个数<br>3.初始化器的重要性<br>  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素<br>  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化<br>4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值<br>  <a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> oxen[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">/*初始化没问题,不足的参数设置为0*/</span></span><br><span class="line">  <span class="keyword">int</span> yaks[SIZE];</span><br><span class="line">  yaks = oxen; <span class="comment">/*不允许*/</span></span><br><span class="line">  yaks[SIZE] = oxen[SIZE];<span class="comment">/*数组下标越界*/</span></span><br><span class="line">  yaks[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">/*不起作用*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.数组边界<br>  在C标准中，使用越界下标的结果是未定义的<br>  使用越界的数组下标可能会导致程序改变其他变量的值。不同的编译器运行同一个程序的结果可能不同，有些会导致程序异常中止。<br>  要注意数组的边界</p><p>6.指针和数组<br>  short类型占两个字节、double类型占八个字节<br>  在C中，指针加一指的是增加一个存储单元，对数组而言，这意味着加一后得到地址是下一个元素的地址，而不是下一个字节的地址，所以必须声明指针所指向对象的类型<br>  系统中地址是按字节编码的<br>7.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;<span class="comment">//一元运算符*和++的优先级相同,但结合律是从右往左</span></span><br></pre></td></tr></table></figure></p><p>  即表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)*start++=*(start++) =&gt;m=start;*m;start++(先把指针指向位置上值取出，然后再递增指针)</span><br><span class="line"><span class="number">2</span>)total = total+*m;</span><br></pre></td></tr></table></figure><p>8.<code>int * p = &amp; a;</code><br>  p是指向a的指针，p中存的是a的地址<br>  &amp;p是指向指针p的指针，&amp;p中存的是指针p的地址<br>9.创建一个指针时，系统只分配了储存指针本身的内存，并未分配存储数据的内存，因此，在使用指针之前，必须先用已分配的地址初始化它。<br>10.const 指针是指不能用指针来改变它所指向的值，但是可以让指针指向别处<br>11.<br>1）把const数据或非const数据的地址初始化为指向const的指针或为其赋值是合法的</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">const double *pc = rate; <span class="comment">//有效</span></span><br><span class="line">pc = locked;<span class="comment">//有效</span></span><br><span class="line">pc = &amp;locked[<span class="number">3</span>] ;<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>2）只能把非const数据的地址赋给普通指针</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">double *pp = rate;<span class="comment">//有效</span></span><br><span class="line">pp = locked;<span class="comment">//无效&lt;因为如果成立的话就可以用指针改变locked的值了&gt;</span></span><br><span class="line">pp = &amp;rate[<span class="number">3</span>];<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>12.<code>double * const pc = &amp;rate;//可以初始化一个不能指向别处的指针</code><br>13.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">int</span> (* p)<span class="selector-attr">[2]</span>;<span class="comment">//p指向一个内含两个int类型值的数组</span></span><br><span class="line"><span class="selector-tag">int</span> * <span class="selector-tag">p</span><span class="selector-attr">[2]</span>;<span class="comment">//p是一个内含两个指针元素的数组，每个元素都指向int 的指针</span></span><br></pre></td></tr></table></figure><p>14.指针的兼容性<br>   指针之间的赋值比数值类型之间的赋值要严格<br>   假如有如下声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br><span class="line"><span class="keyword">int</span> (*pa)[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ar1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> **p2;<span class="comment">//一个指向指针的指针</span></span><br></pre></td></tr></table></figure><p>   有如下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt = &amp;ar1[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1;<span class="comment">//无效</span></span><br><span class="line">pa = ar1;<span class="comment">//都是指向内含3个int类型元素的数组的指针</span></span><br><span class="line">pa = ar2;<span class="comment">//无效</span></span><br><span class="line">p2 = &amp;pt;<span class="comment">//both point-to-int *</span></span><br><span class="line">*p2 = ar2[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">p2 = ar2;<span class="comment">//无效</span></span><br></pre></td></tr></table></figure><p>15.把const指针赋给非const指针不安全，因为这样可以使用新的指针改变const指针指向的数据<br>   但是把非const指针赋给const指针没问题，前提是只进行一级解引用<br>16.编译器会把数组表示法转换成指针表示法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar[<span class="number">1</span>] -&gt; ar+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ar[][length] -&gt;表示ar指向一个内含length个<span class="keyword">int</span>类型值的数组</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> ar[<span class="number">3</span>][<span class="number">4</span>],<span class="keyword">int</span> rows)</span></span>;<span class="comment">//有效声明，但是3会被忽略</span></span><br></pre></td></tr></table></figure><ol start="17"><li>在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.const 关键字声明后数据不能修改&lt;br&gt;2.sizeof 数组名指的是整个数组的大小（以字节为单位）&lt;br&gt;  sizeof 数组名[0]指的是数组中一个元素的大小&lt;br&gt;  整个数组的大小除以单个元素的大小就是数组元素的个数&lt;br&gt;3.初始化器的重要性&lt;br&gt;  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素&lt;br&gt;  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化&lt;br&gt;4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C语言学习" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/30/hello-world/"/>
    <id>http://yoursite.com/2018/07/30/hello-world/</id>
    <published>2018-07-30T09:28:02.453Z</published>
    <updated>2018-07-31T02:17:30.989Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
