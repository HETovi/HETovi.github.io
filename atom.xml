<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tovi的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-02T03:31:12.358Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tovi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库学习</title>
    <link href="http://yoursite.com/2018/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/02/数据库学习/</id>
    <published>2018-08-02T02:40:00.000Z</published>
    <updated>2018-08-02T03:31:12.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。<br>事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。<br><a id="more"></a><br>事务的定义：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></p><p>事务的特性：（ACID）<br>Atomicity 原子性：要么不做，要么全做。<br>Consistency 一致性：从一个一致状态到另一个一致状态。<br>Isolation 隔离性：一个事务不能被其他事务干扰，并发控制就是为了保证事务的隔离性。<br>Durability 持久性：事务一旦提交，它对数据库中数据的改变是持久的。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><p>Oracle建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table1 (</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   varchar2(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table1 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DB2建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table2(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">constraint</span> table2 primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>informix建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table3(</span><br><span class="line">    <span class="keyword">id</span>     <span class="built_in">integer</span>   <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    qssi   <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>) <span class="keyword">constraint</span> table3</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="视图语句"><a href="#视图语句" class="headerlink" title="视图语句"></a>视图语句</h3><p>创建视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> t <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> b;</span><br></pre></td></tr></table></figure></p><p>删除视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> t;</span><br></pre></td></tr></table></figure></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>数据库中的索引是某个表中一列或多列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。<br>创建唯一性：不允许两行具有相同的索引值（创建了唯一约束，系统将自动创建唯一索引）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure></p><p>创建普通索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> table_name(column_name);</span><br></pre></td></tr></table></figure></p><p>删除索引：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> index_name;</span><br></pre></td></tr></table></figure></p><p>主键索引：主键索引要求主键中的每个值是唯一的，（创建主键自动创建主键索引）<br>聚集索引(CLUSTERED)&lt;查询速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序相同，表中只能包含一个聚集索引，主键列默认为聚集索引<br>非聚集索引(NONCLUSTERED)&lt;更新速度快&gt;：表中各行的物理顺序与键值的逻辑（索引）顺序不匹配，表中可以有249个非聚集索引</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>序列是一数据库对象，利用它可生成唯一的整数。一般使用序列自动地生成主码值。一个序列的值是由特别的Oracle程序自动生成。</p><p>创建序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> sequence_name</span><br><span class="line"><span class="keyword">minvalue</span> <span class="number">1</span> </span><br><span class="line">maxvalue <span class="number">9999999</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>  </span><br><span class="line">nocache</span><br><span class="line"><span class="keyword">cycle</span> </span><br><span class="line"><span class="keyword">order</span>;</span><br><span class="line">INCREMENT BY： 指定序列号之间的间隔，该值可为正的或负的整数，但不可为0。序列为升序。忽略该子句时，缺省值为1。</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span>：指定生成的第一个序列号。在升序时，序列可从比最小值大的值开始，缺省值为序列的最小值。对于降序，序列可由比最大值小的值开始，缺省值为序列的最大值。</span><br><span class="line">MAXVALUE：指定序列可生成的最大值。</span><br><span class="line"><span class="keyword">NOMAXVALUE</span>：为升序指定最大值为<span class="number">1027</span>，为降序指定最大值为<span class="number">-1</span>。</span><br><span class="line"><span class="keyword">MINVALUE</span>：指定序列的最小值。</span><br><span class="line"><span class="keyword">NOMINVALUE</span>：为升序指定最小值为<span class="number">1</span>。为降序指定最小值为<span class="number">-1026</span>。</span><br><span class="line"><span class="keyword">CYCLE</span>: 循环使用，到达最大值或者最小值时，从新建立对象</span><br><span class="line"><span class="keyword">CACHE</span> X: 制定存入缓存（也就是内存）序列值的个数</span><br></pre></td></tr></table></figure></p><p>删除序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">sequence</span> sequence_name;</span><br></pre></td></tr></table></figure></p><p>修改序列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">sequence</span> sequence_name <span class="keyword">cycle</span>;</span><br></pre></td></tr></table></figure></p><p>查询序列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">nextval</span> <span class="keyword">for</span> FYCK <span class="keyword">as</span> <span class="keyword">ID</span> <span class="keyword">from</span> SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FYCK.nextval <span class="keyword">from</span> ywty_xtywzt;</span><br></pre></td></tr></table></figure></p><h3 id="基本表操作"><a href="#基本表操作" class="headerlink" title="基本表操作"></a>基本表操作</h3><p>删除表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> table1;</span><br></pre></td></tr></table></figure></p><p>插入表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(<span class="keyword">id</span>,qssi) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure></p><p>删除表数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> table1 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>更新表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> qssi=<span class="string">'2'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>修改字段长度<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi varchar2(<span class="number">21</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">varchar</span>(<span class="number">22</span>);</span><br></pre></td></tr></table></figure></p><p>更改字段类型<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span>(qssi <span class="built_in">integer</span>);</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> qssi <span class="keyword">SET</span> <span class="keyword">DATA</span> <span class="keyword">TYPE</span> <span class="built_in">VARCHAR</span>(<span class="number">36</span>);只可以加宽，不能更改类型</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> qssi <span class="built_in">integer</span>;</span><br></pre></td></tr></table></figure></p><p>增加列<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">add</span> mail <span class="built_in">varchar</span>(<span class="number">128</span>);</span><br></pre></td></tr></table></figure></p><p>删除列<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> <span class="keyword">column</span> mail;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供删除列功能（解决办法是删除表，重建）</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">drop</span> mail;</span><br></pre></td></tr></table></figure></p><p>更改列名<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">rename</span> <span class="keyword">column</span> mail <span class="keyword">to</span> mail2;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不提供更改列名功能（解决办法同删除，或者通过建立一个新视图解决）</span><br></pre></td></tr></table></figure></p><p>更改列的限制（主键、非空）<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="literal">null</span>/<span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">alter</span> <span class="keyword">column</span> qssi <span class="keyword">drop</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table1 <span class="keyword">modify</span> mail2 <span class="built_in">varchar</span> <span class="literal">null</span>/noy <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>取前N条记录<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> <span class="keyword">rownum</span> &lt;=n ;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">fetch</span> <span class="keyword">first</span> n <span class="keyword">rows</span> <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">first</span> n * <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>取当前日期<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">timestamp</span> <span class="keyword">from</span> sysibm.sysdummy1;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">current</span> <span class="keyword">from</span> sysmaster:sysshmvals;</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>空值转换<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nvl(ajsm,<span class="number">0</span>) <span class="keyword">from</span> table1;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">value</span>(ajsm,<span class="string">''</span>)  <span class="keyword">FROM</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  nvl(by1,<span class="number">0</span>) <span class="keyword">FROM</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><p>取值判断<br>Oracle<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> jjcd <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_xdxx;</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> ywsqbh <span class="keyword">when</span> <span class="string">'01'</span> <span class="keyword">then</span> <span class="string">'正常'</span> <span class="keyword">else</span> <span class="string">'加急'</span> <span class="keyword">end</span>  <span class="keyword">from</span> gab_dxzp_lltj;</span><br></pre></td></tr></table></figure></p><h2 id="sql后台执行命令"><a href="#sql后台执行命令" class="headerlink" title="sql后台执行命令"></a>sql后台执行命令</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlplus gapsdb/gapsdb@ora11g</span><br><span class="line">@test.sql</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2 connect to agent21t user dba using HDb2@M01</span><br><span class="line">db2 –tvf 文件名 –z 执行日志文件</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbaccess y4tinf epcc.sql</span><br></pre></td></tr></table></figure></p><h3 id="数据库启停"><a href="#数据库启停" class="headerlink" title="数据库启停"></a>数据库启停</h3><p>Oracle<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：conn /as sysdba</span><br><span class="line">启动：startup</span><br><span class="line">停止：shutdown</span><br></pre></td></tr></table></figure></p><p>db2<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接：db2 connect to test</span><br><span class="line">启动：db2start</span><br><span class="line">停止：db2stop</span><br></pre></td></tr></table></figure></p><p>informix<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动：oninit –vy</span><br><span class="line">停止：onmode –ky</span><br></pre></td></tr></table></figure></p><h2 id="sql共享原理"><a href="#sql共享原理" class="headerlink" title="sql共享原理"></a>sql共享原理</h2><p>ORACLE将执行过的SQL语句存放在内存的共享池(shared buffer pool)中，可以被所有的数据库用户共享。<br>当你执行一个SQL语句(有时被称为一个游标)时,如果它和之前的执行过的语句完全相同,ORACLE就能很快获得已经被解析的语句以及最好的执行路径. 这个功能大大地提高了SQL的执行性能并节省了内存的使用。<br>可惜的是，Oracle只对简单的表提供高速缓冲(cache bufferiIl，这个功能并不适用于多表连接查询。数据库管理员必须在启动参数文件中为这个区域设置合适的参数，当这个内存区域越大，就可以保留更多的语句，当然被共享的可能性也就越大了。当向Oracle提交一个SQL语句时，Oracle会首先在这块内存中查找相同的语句。<br>Oracle对两者采取的是一种严格匹配策略，要达成共享。SQL语句必须完全相同(包括空格、换行等)。<br>能够使用共享的语句必须满足三个条件：<br>1）字符级的比较。<br>当前被执行的语句和共享池中的语句必须完全相同。<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ATABLE；和下面每一个<span class="keyword">SQL</span>语句都不同：</span><br><span class="line"><span class="keyword">SELECT</span>  *<span class="keyword">from</span> ATABLE</span><br><span class="line"><span class="keyword">Select</span>  * <span class="keyword">From</span> Atable；</span><br></pre></td></tr></table></figure><p>2）语句所指对象必须完全相同 即两条SQL语句操作的数据库对象必须同一。<br>3）语句中必须使用相同命名的绑定变量。如：第一组的两个SQL语句是相同的，可以共享；而第二组中两个语句不同，即使在运行时赋予不同的绑定变量以相同的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =  ：blk1.pin；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.pin；</span><br><span class="line">第二组 <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin =：blk1.ot_jnd；</span><br><span class="line">   <span class="keyword">select</span> pin，<span class="keyword">name</span> <span class="keyword">from</span> people <span class="keyword">where</span> pin = ：blk1.ov_jnd；</span><br></pre></td></tr></table></figure><p>当一个Oracle实例接收一条sql后的顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> a <span class="keyword">Cursor</span> 创建游标</span><br><span class="line"><span class="keyword">Parse</span> the <span class="keyword">Statement</span> 分析语句</span><br><span class="line"><span class="keyword">Describe</span> Results <span class="keyword">of</span> a <span class="keyword">Query</span> 描述查询的结果集</span><br><span class="line"><span class="keyword">Define</span> <span class="keyword">Output</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 定义查询的输出数据</span><br><span class="line">Bind <span class="keyword">Any</span> <span class="keyword">Variables</span> 绑定变量</span><br><span class="line">Parallelize the <span class="keyword">Statement</span> 并行执行语句</span><br><span class="line">Run the <span class="keyword">Statement</span> 运行语句</span><br><span class="line"><span class="keyword">Fetch</span> <span class="keyword">Rows</span> <span class="keyword">of</span> a <span class="keyword">Query</span> 取查询出来的行</span><br><span class="line"><span class="keyword">Close</span> the <span class="keyword">Cursor</span> 关闭游标</span><br></pre></td></tr></table></figure><h2 id="重编译问题"><a href="#重编译问题" class="headerlink" title="重编译问题"></a>重编译问题</h2><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dConMsg <span class="keyword">where</span> contract_no = <span class="number">32013484095139</span></span><br></pre></td></tr></table></figure><p>这个语句每执行一次就需要在SHARE POOL 硬解析一次，一百万用户就是一百万次，消耗CPU和内存，如果业务量大，很可能导致宕库……<br>如果绑定变量，则只需要硬解析一次，重复调用即可</p><h3 id="绑定变量解决重新编译问题"><a href="#绑定变量解决重新编译问题" class="headerlink" title="绑定变量解决重新编译问题"></a>绑定变量解决重新编译问题</h3><p>未使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sprintf(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> scott.test1 (num1, num2) <span class="keyword">values</span> </span><br><span class="line"> (%d,%d)<span class="string">",n_var1, n_var2);</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE IMMEDIATE :sqlstr ;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><p>使用绑定变量的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strcpy(sqlstr, "<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> (num1, num2) <span class="keyword">values</span> (:v1, :v2)<span class="string">");</span></span><br><span class="line"><span class="string">EXEC SQL PREPARE sql_stmt FROM :sqlstr;</span></span><br><span class="line"><span class="string">EXEC SQL EXECUTE sql_stmt USING :n_var1, :n_var2;</span></span><br><span class="line"><span class="string">EXEC SQL COMMIT;</span></span><br></pre></td></tr></table></figure><h2 id="sql语句的处理过程"><a href="#sql语句的处理过程" class="headerlink" title="sql语句的处理过程"></a>sql语句的处理过程</h2><h3 id="解析-PARSE"><a href="#解析-PARSE" class="headerlink" title="解析(PARSE)"></a>解析(PARSE)</h3><pre><code>在共享池中查找SQL语句检查语法检查语义和相关的权限合并(MERGE)视图定义和子查询确定执行计划</code></pre><h3 id="绑定-BIND"><a href="#绑定-BIND" class="headerlink" title="绑定(BIND)"></a>绑定(BIND)</h3><pre><code>在语句中查找绑定变量赋值(或重新赋值)</code></pre><h3 id="执行-EXECUTE"><a href="#执行-EXECUTE" class="headerlink" title="执行(EXECUTE)"></a>执行(EXECUTE)</h3><pre><code>应用执行计划执行必要的I/O和排序操作</code></pre><h3 id="提取-FETCH"><a href="#提取-FETCH" class="headerlink" title="提取(FETCH)"></a>提取(FETCH)</h3><pre><code>从查询结果中返回记录必要时进行排序</code></pre><h2 id="sql优化的一般性原则"><a href="#sql优化的一般性原则" class="headerlink" title="sql优化的一般性原则"></a>sql优化的一般性原则</h2><p>目标：<br>    减少服务器资源消耗（主要是磁盘IO）.<br>设计方面：<br>    尽量依赖oracle的优化器，并为其提供条件；<br>    合适的索引.<br>编码方面：<br>    利用索引，避免大表FULL TABLE SCAN；<br>    避免写过于复杂的sql，不一定非要一个sql解决问题；<br>    在不影响业务的前提下减小事务的粒度.</p><h3 id="优化概括"><a href="#优化概括" class="headerlink" title="优化概括"></a>优化概括</h3><p>创建表的时候。应尽量建立主键，大数据表删除，用truncate table代替delete。<br>合理使用索引，在OLTP（数仓）应用中一张表的索引不要太多。组合索引的列顺序尽量与查询条件列顺序保持一致。<br>查询尽量用确定的列名，少用<em>号。select count(key)from tab where key&gt; 0性能优于select count(</em>)from tab；<br>尽量少嵌套子查询，这种查询会消耗大量的CPU资源；对于有比较多or运算的查询，建议分成多个查询，用union all联结起来；多表查询的查询语句中，选择最有效率的表名顺序。Oracle解析器对表解析从右到左，所以记录少的表放在右边。<br>尽量多用commit语句提交事务，可以及时释放资源、解锁、释放日志空间、减少管理花费。</p><h3 id="用UNION-ALL-替换UNION"><a href="#用UNION-ALL-替换UNION" class="headerlink" title="用UNION-ALL 替换UNION"></a>用UNION-ALL 替换UNION</h3><p>当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br><span class="line">    <span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> ACCT_NUM, BALANCE_AMT <span class="keyword">FROM</span> DEBIT_TRANSACTIONS</span><br><span class="line">          <span class="keyword">WHERE</span> TRAN_DATE = ’<span class="number">31</span>-<span class="built_in">DEC</span><span class="number">-95</span>’</span><br></pre></td></tr></table></figure><h3 id="避免在索引列上使用函数"><a href="#避免在索引列上使用函数" class="headerlink" title="避免在索引列上使用函数"></a>避免在索引列上使用函数</h3><p>WHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描<br>低效：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL * <span class="number">12</span> &gt; <span class="number">25000</span>;</span><br></pre></td></tr></table></figure><p>高效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> SAL  &gt; <span class="number">25000</span>/<span class="number">12</span>;</span><br></pre></td></tr></table></figure><h3 id="避免使用前置通配符"><a href="#避免使用前置通配符" class="headerlink" title="避免使用前置通配符"></a>避免使用前置通配符</h3><p>WHERE子句中, 如果索引列所对应的值的第一个字符由通配符(WILDCARD)开始, 索引将不被采用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> USER_NO,USER_NAME,ADDRESS <span class="keyword">FROM</span> USER_FILES <span class="keyword">WHERE</span> USER_NO <span class="keyword">LIKE</span> <span class="string">'%109204421'</span>;</span><br></pre></td></tr></table></figure><p>在这种情况下，ORACLE将使用全表扫描</p><h3 id="避免在索引列上使用NOT"><a href="#避免在索引列上使用NOT" class="headerlink" title="避免在索引列上使用NOT"></a>避免在索引列上使用NOT</h3><p>通常，我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE遇到NOT,他就会停止使用索引转而执行全表扫描.<br>低效:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE ! = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>高效: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> … <span class="keyword">FROM</span> DEPT <span class="keyword">WHERE</span> DEPT_CODE &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="用NOT-EXISTS-替代-NOT-IN"><a href="#用NOT-EXISTS-替代-NOT-IN" class="headerlink" title="用NOT EXISTS 替代 NOT IN"></a>用NOT EXISTS 替代 NOT IN</h3><p>在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历).<br>使用NOT EXISTS 子句可以有效地利用索引。尽可能使用NOT EXISTS来代替NOT IN，尽管二者都使用了NOT（不能使用索引而降低速度），NOT EXISTS要比NOT IN查询效率更高。<br>语句1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><p>语句2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dname, deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept.deptno = emp.deptno);</span><br></pre></td></tr></table></figure><p>语句2比语句1的执行性能好很多</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;事务是数据库系统中的一个工作单位，它是由用户定义的一组操作序列。一个事务可以一组sql语句、一条sql语句或整个程序，一个应用程序可以包括多个事务。&lt;br&gt;事务的开始和结束可以由用户显示控制。如果用户没有显示的定义，则由数据库缺省自动划分。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库,SQL" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-SQL/"/>
    
  </entry>
  
  <entry>
    <title>Makefile学习</title>
    <link href="http://yoursite.com/2018/07/31/Makefile%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/07/31/Makefile学习/</id>
    <published>2018-07-31T06:29:00.000Z</published>
    <updated>2018-08-01T02:47:14.534Z</updated>
    
    <content type="html"><![CDATA[<p>本文借鉴于<br><a href="https://www.cnblogs.com/mfryf/p/3305778.html" target="_blank" rel="noopener">陈皓 (CSDN) 跟我一起写 Makefile</a><br>makefile<br>在Makefile中的命令，必须以[tab]键开始</p><p>Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。<br>Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。</p><p>本博客中默认的编译器是Unix下的GCC和CC<br><a id="more"></a></p><h2 id="关于程序的链接和编译"><a href="#关于程序的链接和编译" class="headerlink" title="关于程序的链接和编译"></a>关于程序的链接和编译</h2><p>一般来说，无论是C还是C++，首先要把源文件编译成中间代码文件，在windows下是.obj文件，Unix下是.o文件，即Object File，这个动作叫做编译。然后再把大量的Object File合成执行文件，这个动作叫做链接（Link）。<br>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。<br>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（LibraryFile)，也就是 .lib文件，在UNIX下，是Archive File，也就是 .a文件。<br>也就是说，源代码首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.</p><h2 id="makefile介绍"><a href="#makefile介绍" class="headerlink" title="makefile介绍"></a>makefile介绍</h2><p>make命令执行时，需要一个 Makefile文件，以告诉make命令需要怎么样的去编译和链接程序。make命令会自动智能地根据当前的文件修改的情况来确定哪些文件需要重新编译，从而自己编译所需要的文件和连接目标程序</p><h3 id="makefile的规则"><a href="#makefile的规则" class="headerlink" title="makefile的规则"></a>makefile的规则</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target...:prerequisites...(预备知识，先决条件)</span></span><br><span class="line">command(指令)</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签（Label）。<br>prerequisites就是，要生成那个target所需要的文件或是目标<br>command就是make需要执行的命令。（任意的shell命令）<br>这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。说白一点就是说，prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。这就是Makefile的规则。也就是Makefile中最核心的内容。</p><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如果一个工程有3个头文件，和8个C文件，为了完成规则：<br>1.如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。<br>2.如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。<br>3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序<br>我们的Makefile文件应该是这样的：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">       cc-c main.c</span><br><span class="line">kbd.o : kbd.c defs.hcommand.h</span><br><span class="line">       cc-c kbd.c</span><br><span class="line">command.o : command.cdefs.h command.h</span><br><span class="line">       cc-c command.c</span><br><span class="line">display.o : display.cdefs.h buffer.h</span><br><span class="line">       cc-c display.c</span><br><span class="line">insert.o : insert.cdefs.h buffer.h</span><br><span class="line">       cc-c insert.c</span><br><span class="line">search.o : search.cdefs.h buffer.h</span><br><span class="line">       cc-c search.c</span><br><span class="line">files.o : files.c defs.hbuffer.h command.h</span><br><span class="line">       cc-c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">       cc-c utils.c</span><br><span class="line">clean :</span><br><span class="line">       rmedit main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>我们可以把这个内容保存在文件为“Makefile”或“makefile”的文件中，然后在该目录下直接输入命令“make”就可以生成执行文件edit。如果要删除执行文件和所有的中间目标文件，那么，只要简单地执行一下“make clean”就可以了。<br>在这个makefile中，目标文件（target）包含：执行文件edit和中间目标文件（*.o），依赖文件（prerequisites）就是冒号后面的那些 .c 文件和 .h文件。每一个 .o 文件都有一组依赖文件，而这些 .o 文件又是执行文件 edit 的依赖文件。依赖关系的实质上就是说明了目标文件是由哪些文件生成的，换言之，目标文件是哪些文件更新的。</p><p>在定义好依赖关系后，后续的那一行定义了如何生成目标文件的操作系统命令，一定要以一个Tab键作为开头。记住，make并不管命令是怎么工作的，他只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，如果prerequisites文件的日期要比targets文件的日期要新，或者target不存在的话，那么，make就会执行后续定义的命令。<br>clean不是一个文件，它只不过是一个动作名字，有点像C语言中的lable一样，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。要执行其后的命令，就要在make命令后明显得指出这个lable的名字。这样的方法非常有用，我们可以在一个makefile中定义不用的编译或是和编译无关的命令，比如程序的打包，程序的备份，等等。</p><h3 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="make是如何工作的"></a>make是如何工作的</h3><p>在默认的方式下，也就是我们只输入make命令。那么，<br>1.make会在当前目录下找名字叫“Makefile”或“makefile”的文件<br>2.如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件<br>3.如果edit文件不存在，或是edit所依赖的后面的.o文件的文件修改时间要比edit这个文件新，那么，它就会执行后面所定义的命令来生成edit这个文件<br>4.如果edit所依赖的.o文件也存在，那么make会在当前文件中目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件<br>5.当然了，你的C文件和H文件是存在的，于是make会生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit了</p><p>这就是整个make的依赖性，make会一层一层去找文件的依赖关系，直到最终编译出第一个目标文件。在找寻的过程中，如果出现错误，比如最后被依赖的文件找不到，那么make就会直接退出，并报错，而对于所定义的命令的错误，或是编译不成功，make根本不理。make只管文件的依赖性。</p><p>通过上述分析，我们知道，像clean这种，没有被第一个目标文件直接或间接关联，那么它后面所定义的命令将不会被自动执行，不过，我们可以显示要make执行。即命令——“make clean”，以此来清除所有的目标文件，以便重编译</p><p>于是在我们编程中，如果这个工程已被编译过了，当我们修改了其中一个源文件，比如file.c，那么根据我们的依赖性，我们的目标file.o会被重编译（也就是在这个依性关系后面所定义的命令），于是file.o的文件也是最新的啦，于是file.o的文件修改时间要比edit要新，所以edit也会被重新链接了（详见edit目标文件后定义的命令）。而如果我们改变了“command.h”，那么，kdb.o、command.o和files.o都会被重编译，并且，edit会被重链接。</p><h3 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h3><p>上面的例子中 edit的规则为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o  insert.osearch.o files.o utils.o</span><br><span class="line">       cc-o edit main.o kbd.o command.o display.o  insert.o search.o files.outils.o</span><br></pre></td></tr></table></figure><p> 我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。</p><p> 所以，为了makefile的易维护，在makefile中我们可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。比如，我们声明一个变量，叫objects,OBJECTS, objs, OBJS, obj, 或是 OBJ，反正不管什么啦，只要能够表示obj文件就行了。我们在makefile一开始就这样定义：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects = main.okbd.o command.o display.o insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>于是，我们就可以很方便地在我们的makefile中以“$(objects)”的方式来使用这个变量了，于是我们的改良版makefile就变成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.osearch.o files.o utils.o </span><br><span class="line"></span><br><span class="line">   edit: $(objects)</span><br><span class="line"></span><br><span class="line">           cc-o edit $(objects)</span><br><span class="line"></span><br><span class="line">   main.o: main.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c main.c</span><br><span class="line"></span><br><span class="line">   kbd.o: kbd.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c kbd.c</span><br><span class="line"></span><br><span class="line">   command.o: command.c defs.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c command.c</span><br><span class="line"></span><br><span class="line">   display.o: display.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c display.c</span><br><span class="line"></span><br><span class="line">   insert.o: insert.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c insert.c</span><br><span class="line"></span><br><span class="line">   search.o: search.c defs.h buffer.h</span><br><span class="line"></span><br><span class="line">           cc-c search.c</span><br><span class="line"></span><br><span class="line">   files.o: files.c defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">           cc-c files.c</span><br><span class="line"></span><br><span class="line">   utils.o: utils.c defs.h</span><br><span class="line"></span><br><span class="line">           cc-c utils.c</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit $(objects)</span><br></pre></td></tr></table></figure><p>所以如果以后有新的.o文件加入，我们只需要修改一下objects变量就可以了</p><h3 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="让make自动推导"></a>让make自动推导</h3><p>GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">  edit :<span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">   main.o: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   command.o: defs.h command.h</span><br><span class="line"></span><br><span class="line">   display.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   insert.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   search.o: defs.h buffer.h</span><br><span class="line"></span><br><span class="line">   files.o: defs.h buffer.h command.h</span><br><span class="line"></span><br><span class="line">   utils.o: defs.h</span><br><span class="line"></span><br><span class="line">    .PHONY: clean</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>这种方法，也就是make的“隐晦规则”。上面文件内容中，“.PHONY”表示，clean是个伪目标文件。</p><h3 id="另类风格的makefile"><a href="#另类风格的makefile" class="headerlink" title="另类风格的makefile"></a>另类风格的makefile</h3><p>即然我们的make可以自动推导命令，那么我看到那堆[.o]和[.h]的依赖就有点不爽，那么多的重复的[.h]，能不能把其收拢起来，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">objects= main.o kbd.o command.o display.o  insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">    edit: <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">           cc-o edit <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$(objects)</span>: defs.h</span><br><span class="line"></span><br><span class="line">   kbd.ocommand.o files.o : command.h</span><br><span class="line"></span><br><span class="line">   display.oinsert.o search.o files.o : buffer.h</span><br><span class="line"></span><br><span class="line">    .PHONY : clean  //“.PHONY”表示，clean是个伪目标文件</span><br><span class="line"></span><br><span class="line">   clean:</span><br><span class="line"></span><br><span class="line">           rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h3 id="清空目标文件的规则"><a href="#清空目标文件的规则" class="headerlink" title="清空目标文件的规则"></a>清空目标文件的规则</h3><p>每个Makefile中都应该写一个清空目标文件（.o和执行文件）的规则，这不仅便于重编译，也很利于保持文件的清洁</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">      clean:</span><br><span class="line">              -rmedit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>.PHONY意思表示clean是一个“伪目标”。而在rm命令前面加了一个小减号的意思就是，也许某些文件出现问题，但不要管，继续做后面的事。当然，clean的规则不要放在文件的开头，不然，这就会变成make的默认目标，相信谁也不愿意这样。不成文的规矩是——“clean从来都是放在文件的最后”。</p><h2 id="makefile综述"><a href="#makefile综述" class="headerlink" title="makefile综述"></a>makefile综述</h2><h3 id="makefile里有什么？"><a href="#makefile里有什么？" class="headerlink" title="makefile里有什么？"></a>makefile里有什么？</h3><p>Makefile里主要包含了五个东西：显式规则、隐晦规则、变量定义、文件指示和注释。</p><ol><li>显式规则。显式规则说明了，如何生成一个或多的的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。</li><li>隐晦规则。由于我们的make有自动推导的功能，所以隐晦的规则可以让我们比较粗糙地简略地书写Makefile，这是由make所支持的。</li><li>变量的定义。在Makefile中我们要定义一系列的变量，变量一般都是字符串，这个有点你C语言中的宏，当Makefile被执行时，其中的变量都会被扩展到相应的引用位置上。</li><li>文件指示。其包括了三个部分，一个是在一个Makefile中引用另一个Makefile，就像C语言中的include一样；另一个是指根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；还有就是定义一个多行的命令。</li><li>注释。Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“#”。</li></ol><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文借鉴于&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/mfryf/p/3305778.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;陈皓 (CSDN) 跟我一起写 Makefile&lt;/a&gt;&lt;br&gt;makefile&lt;br&gt;在Makefile中的命令，必须以[tab]键开始&lt;/p&gt;
&lt;p&gt;Makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，Makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为Makefile就像一个shell脚本一样，其中也可以执行操作系统的命令。&lt;br&gt;Makefile带来的好处就是————“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大地提高了软件开发的效率。&lt;/p&gt;
&lt;p&gt;本博客中默认的编译器是Unix下的GCC和CC&lt;br&gt;
    
    </summary>
    
    
      <category term="Makefile，Unix" scheme="http://yoursite.com/tags/Makefile%EF%BC%8CUnix/"/>
    
  </entry>
  
  <entry>
    <title>C语言数组和指针</title>
    <link href="http://yoursite.com/2018/07/31/C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E5%92%8C%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2018/07/31/C语言数组和指针/</id>
    <published>2018-07-31T00:54:25.000Z</published>
    <updated>2018-07-31T03:56:05.296Z</updated>
    
    <content type="html"><![CDATA[<p>1.const 关键字声明后数据不能修改<br>2.sizeof 数组名指的是整个数组的大小（以字节为单位）<br>  sizeof 数组名[0]指的是数组中一个元素的大小<br>  整个数组的大小除以单个元素的大小就是数组元素的个数<br>3.初始化器的重要性<br>  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素<br>  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化<br>4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值<br>  <a id="more"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> oxen[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">/*初始化没问题,不足的参数设置为0*/</span></span><br><span class="line">  <span class="keyword">int</span> yaks[SIZE];</span><br><span class="line">  yaks = oxen; <span class="comment">/*不允许*/</span></span><br><span class="line">  yaks[SIZE] = oxen[SIZE];<span class="comment">/*数组下标越界*/</span></span><br><span class="line">  yaks[SIZE] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">/*不起作用*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.数组边界<br>  在C标准中，使用越界下标的结果是未定义的<br>  使用越界的数组下标可能会导致程序改变其他变量的值。不同的编译器运行同一个程序的结果可能不同，有些会导致程序异常中止。<br>  要注意数组的边界</p><p>6.指针和数组<br>  short类型占两个字节、double类型占八个字节<br>  在C中，指针加一指的是增加一个存储单元，对数组而言，这意味着加一后得到地址是下一个元素的地址，而不是下一个字节的地址，所以必须声明指针所指向对象的类型<br>  系统中地址是按字节编码的<br>7.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;<span class="comment">//一元运算符*和++的优先级相同,但结合律是从右往左</span></span><br></pre></td></tr></table></figure></p><p>  即表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>)*start++=*(start++) =&gt;m=start;*m;start++(先把指针指向位置上值取出，然后再递增指针)</span><br><span class="line"><span class="number">2</span>)total = total+*m;</span><br></pre></td></tr></table></figure><p>8.<code>int * p = &amp; a;</code><br>  p是指向a的指针，p中存的是a的地址<br>  &amp;p是指向指针p的指针，&amp;p中存的是指针p的地址<br>9.创建一个指针时，系统只分配了储存指针本身的内存，并未分配存储数据的内存，因此，在使用指针之前，必须先用已分配的地址初始化它。<br>10.const 指针是指不能用指针来改变它所指向的值，但是可以让指针指向别处<br>11.<br>1）把const数据或非const数据的地址初始化为指向const的指针或为其赋值是合法的</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">const double *pc = rate; <span class="comment">//有效</span></span><br><span class="line">pc = locked;<span class="comment">//有效</span></span><br><span class="line">pc = &amp;locked[<span class="number">3</span>] ;<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>2）只能把非const数据的地址赋给普通指针</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double rate[<span class="number">5</span>] =&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">const double locked[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">double *pp = rate;<span class="comment">//有效</span></span><br><span class="line">pp = locked;<span class="comment">//无效&lt;因为如果成立的话就可以用指针改变locked的值了&gt;</span></span><br><span class="line">pp = &amp;rate[<span class="number">3</span>];<span class="comment">//有效</span></span><br></pre></td></tr></table></figure><p>12.<code>double * const pc = &amp;rate;//可以初始化一个不能指向别处的指针</code><br>13.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">int</span> (* p)<span class="selector-attr">[2]</span>;<span class="comment">//p指向一个内含两个int类型值的数组</span></span><br><span class="line"><span class="selector-tag">int</span> * <span class="selector-tag">p</span><span class="selector-attr">[2]</span>;<span class="comment">//p是一个内含两个指针元素的数组，每个元素都指向int 的指针</span></span><br></pre></td></tr></table></figure><p>14.指针的兼容性<br>   指针之间的赋值比数值类型之间的赋值要严格<br>   假如有如下声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pt;</span><br><span class="line"><span class="keyword">int</span> (*pa)[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ar1[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> **p2;<span class="comment">//一个指向指针的指针</span></span><br></pre></td></tr></table></figure><p>   有如下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pt = &amp;ar1[<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">pt = ar1;<span class="comment">//无效</span></span><br><span class="line">pa = ar1;<span class="comment">//都是指向内含3个int类型元素的数组的指针</span></span><br><span class="line">pa = ar2;<span class="comment">//无效</span></span><br><span class="line">p2 = &amp;pt;<span class="comment">//both point-to-int *</span></span><br><span class="line">*p2 = ar2[<span class="number">0</span>];<span class="comment">//都是指向int的指针</span></span><br><span class="line">p2 = ar2;<span class="comment">//无效</span></span><br></pre></td></tr></table></figure><p>15.把const指针赋给非const指针不安全，因为这样可以使用新的指针改变const指针指向的数据<br>   但是把非const指针赋给const指针没问题，前提是只进行一级解引用<br>16.编译器会把数组表示法转换成指针表示法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar[<span class="number">1</span>] -&gt; ar+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ar[][length] -&gt;表示ar指向一个内含length个<span class="keyword">int</span>类型值的数组</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> ar[<span class="number">3</span>][<span class="number">4</span>],<span class="keyword">int</span> rows)</span></span>;<span class="comment">//有效声明，但是3会被忽略</span></span><br></pre></td></tr></table></figure><ol start="17"><li>在把数组名作为实际参数时，传递给函数的不是整个数组，而是数组的地址（因此，函数对应的形式参数是指针）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.const 关键字声明后数据不能修改&lt;br&gt;2.sizeof 数组名指的是整个数组的大小（以字节为单位）&lt;br&gt;  sizeof 数组名[0]指的是数组中一个元素的大小&lt;br&gt;  整个数组的大小除以单个元素的大小就是数组元素的个数&lt;br&gt;3.初始化器的重要性&lt;br&gt;  1）如果初始化器后面有更多的值。那么后面的值将被用于初始化指定元素后面的元素&lt;br&gt;  2）如果再次初始化指定的元素，那么最后的初始化将会取代之前的初始化&lt;br&gt;4.C不允许把数组作为一个单元赋给另一个数组，初初始化以外也不允许使用花括号列表的形式赋值&lt;br&gt;
    
    </summary>
    
    
      <category term="C语言学习" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/30/hello-world/"/>
    <id>http://yoursite.com/2018/07/30/hello-world/</id>
    <published>2018-07-30T09:28:02.453Z</published>
    <updated>2018-07-31T02:17:30.989Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
